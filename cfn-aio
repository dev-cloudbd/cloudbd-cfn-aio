#!/bin/bash
#
# Copyright (c) 2018 CloudBD, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# change the working dir to the top of the repo
REPO_PATH=$(dirname $(python -c "import os; print(os.path.realpath('${BASH_SOURCE[0]}'))"))
cd ${REPO_PATH}

CBD_CONFIG_FILE="config/.cfn-aio-config"

if [ -f ${CBD_CONFIG_FILE} ]; then
  source ${CBD_CONFIG_FILE}
fi

# default values for unconfigured use
CBD_PROFILE="${CBD_PROFILE:-default}"
CBD_REMOTE_NAME="${CBD_REMOTE_NAME:-remote}"
CBD_REGION="${CBD_REGION:-us-east-2}"
CBD_AVAILABILITY_ZONE="${CBD_AVAILABILITY_ZONE:-a}"
CBD_SSH_CIDR_RANGE="${CBD_SSH_CIDR_RANGE:-0.0.0.0/0}"
CBD_EC2_INSTANCE_TYPE="${CBD_EC2_INSTANCE_TYPE:-t3.small}"
CBD_EC2_OS="${CBD_EC2_OS:-amzn1}"

validate_region() {
  case "$1" in
    us-east-1|us-east-2|us-west-1|us-west-2|eu-west-1|eu-west-2|eu-west-3|eu-central-1|ap-northeast-1|ap-northeast-2|ap-southeast-1|ap-southeast-2|ap-south-1|ca-central-1|sa-east-1)
      return 0;;
    *)
      return 1;;
  esac
}

validate_profile() {
  if [[ "$1" == "default" ]]; then
    grep -q "\[default\]" ~/.aws/config
  else
    grep -q "\[profile $1\]" ~/.aws/config
  fi
  return $?;
}


validate_cidr() {
  local REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}\/([0-9]|[1-2][0-9]|3[0-2])$'
  [[ $1 =~ $REGEX ]]
  return $?
}

validate_name() {
  local REGEX='^[a-zA-Z][a-zA-Z0-9-]{0,31}$'
  [[ $1 =~ $REGEX ]]
  return $?
}

validate_availability_zone() {
  local REGEX='^[a-f]$'
  [[ $1 =~ $REGEX ]]
  return $?
}

check_availability_zone() {
  local ZoneName=$(aws ec2 describe-availability-zones \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --filters Name=zone-name,Values=${CBD_REGION}$1 \
    --query "AvailabilityZones[].ZoneName" \
    --output text)
  [[ $? -eq 0 ]] && [[ -n ${ZoneName} ]]
  return $?
}

build_all_availability_zones() {
  local AllZones=$(aws ec2 describe-availability-zones \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --query "AvailabilityZones[].ZoneName" \
    --output text)
  CBD_ALL_AVAILABILITY_ZONES=""
  local COMMA=""
  for ZONE in {a..f}; do
    if grep -q ${CBD_REGION}${ZONE} <<< "${AllZones}"; then
      CBD_ALL_AVAILABILITY_ZONES="${CBD_ALL_AVAILABILITY_ZONES}${COMMA}${CBD_REGION}${ZONE}"
    else
      CBD_ALL_AVAILABILITY_ZONES="${CBD_ALL_AVAILABILITY_ZONES}${COMMA}false"
    fi
    COMMA=","
  done
}

validate_os() {
  case "$1" in
    amzn1|amzn2|trusty|xenial|bionic)
      return 0;;
    *)
      return 1;;
  esac
}

check_instance_type() {
  case "$1" in
    t2.nano|t2.micro|t2.small|t2.medium|t2.large|t2.xlarge|t2.2xlarge)
      return 0;;
    t3.nano|t3.micro|t3.small|t3.medium|t3.large|t3.xlarge|t3.2xlarge)
      return 0;;
    m4.large|m4.xlarge|m4.2xlarge|m4.4xlarge|m4.10xlarge|m4.16xlarge)
      return 0;;
    m5.large|m5.xlarge|m5.2xlarge|m5.4xlarge|m5.12xlarge|m5.24xlarge)
      return 0;;
    m5d.large|m5d.xlarge|m5d.2xlarge|m5d.4xlarge|m5d.12xlarge|m5d.24xlarge)
      return 0;;
    m5a.large|m5a.xlarge|m5a.2xlarge|m5a.4xlarge|m5a.12xlarge|m5a.24xlarge)
      return 0;;
    c4.large|c4.xlarge|c4.2xlarge|c4.4xlarge|c4.8xlarge)
      return 0;;
    c5.large|c5.xlarge|c5.2xlarge|c5.4xlarge|c5.9xlarge|c5.18xlarge)
      return 0;;
    c5d.large|c5d.xlarge|c5d.2xlarge|c5d.4xlarge|c5d.9xlarge|c5d.18xlarge)
      return 0;;
    r4.large|r4.xlarge|r4.2xlarge|r4.4xlarge|r4.8xlarge|r4.16xlarge)
      return 0;;
    r5.large|r5.xlarge|r5.2xlarge|r5.4xlarge|r5.12xlarge|r5.24xlarge)
      return 0;;
    r5d.large|r5d.xlarge|r5d.2xlarge|r5d.4xlarge|r5d.12xlarge|r5d.24xlarge)
      return 0;;
    r5a.large|r5a.xlarge|r5a.2xlarge|r5a.4xlarge|r5a.12xlarge|r5a.24xlarge)
      return 0;;
    z1d.large|x1d.xlarge|x1d.2xlarge|z1d.3xlarge|z1d.6xlarge|z1d.12xlarge)
      return 0;;
    x1.16xlarge|x1.32xlarge)
      return 0;;
    x1e.xlarge|x1e.2xlarge|x1e.4xlarge|x1e.8xlarge|x1e.16xlarge|x1e.32xlarge)
      return 0;;
    d2.xlarge|d2.2xlarge|d2.4xlarge|d2.8xlarge)
      return 0;;
    i3.large|i3.xlarge|i3.2xlarge|i3.4xlarge|i3.8xlarge|i3.16xlarge)
      return 0;;
    h1.2xlarge|h1.4xlarge|h1.8xlarge|h1.16xlarge)
      return 0;;
    *)
      # using a fixed region of us-east-1 since aws pricing does not work in all regions
      aws pricing get-attribute-values \
        --profile ${CBD_PROFILE} \
        --region us-east-1 \
        --service-code AmazonEC2 \
        --attribute-name instanceType | grep -q "$1"
      return $?;;
  esac
}

check_credentials() {
  if [ ! -f config/credentials.json ]; then
    cat <<- EOF
	cfn-aio: error: missing credentials:

	   In order to use cfn-aio the CloudBD credentials.json file needs to be
	   in the following directory:

	      ${REPO_PATH}/config

	   The CloudBD credentials.json file can be downloaded after logging in or
	   signing up at:

	      https://manage.cloudbd.io
	EOF
    exit 1
  fi
}

# cloudformation_tail adapted from https://github.com/aws/aws-cli/issues/2887

cloudformation_tail() {
  local stack="$1"
  local deleting="$2"
  local lastEvent
  local lastEventId
  local stackStatus=$(aws cloudformation describe-stacks \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name $stack \
    --query 'Stacks[0].StackStatus' \
    --output text 2>/dev/null)

  until \
    [ $? -ne 0 ] \
    || [ "$stackStatus" = "CREATE_COMPLETE" ] \
    || [ "$stackStatus" = "CREATE_FAILED" ] \
    || [ "$stackStatus" = "DELETE_COMPLETE" ] \
    || [ "$stackStatus" = "DELETE_FAILED" ] \
    || [ "$stackStatus" = "ROLLBACK_COMPLETE" ] \
    || [ "$stackStatus" = "ROLLBACK_FAILED" ] \
    || [ "$stackStatus" = "UPDATE_COMPLETE" ] \
    || [ "$stackStatus" = "UPDATE_ROLLBACK_COMPLETE" ] \
    || [ "$stackStatus" = "UPDATE_ROLLBACK_FAILED" ]; do

    lastEvent=$(aws cloudformation describe-stack-events \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --stack $stack \
      --query 'StackEvents[].{ A:EventId, B:LogicalResourceId, C:ResourceType, D:ResourceStatus, E:Timestamp }' \
      --max-items 1 \
      --output text 2>/dev/null)
    if [ $? -eq 0 ]; then
      eventId=$(awk 'NR==1{print $1}' <<< "$lastEvent")
      if [ "$eventId" != "$lastEventId" ]; then
        lastEventId=$eventId
        logicalResourceId=$(awk 'NR==1{print $2}' <<< "$lastEvent")
        resourceType=$(awk 'NR==1{print $3}' <<< "$lastEvent")
        resourceStatus=$(awk 'NR==1{print $4}' <<< "$lastEvent")
        timeStamp=$(awk 'NR==1{print $5}' <<< "$lastEvent")
        printf "%-27s %-30s %-30s %s\n" "${timeStamp}" "${resourceStatus}" "${logicalResourceId}" "${resourceType}"
      fi
      sleep 3
    fi
    stackStatus=$(aws cloudformation describe-stacks \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --stack-name $stack \
      --query 'Stacks[0].StackStatus' \
      --output text 2>/dev/null)
  done

  local CompletionTime=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

  if [ -n "${deleting}" ]; then
    if [ "$stackStatus" = "DELETE_COMPLETE" ]; then
      echo "${CompletionTime}    DELETE_COMPLETE"
      return 0
    fi

    stackError=$(aws cloudformation describe-stacks \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --stack-name $stack \
      --query 'Stacks[0].StackStatus' \
      --output text 2>&1)
    # expecting the command to fail if the complete stack was deleted
    if [ $? -ne 0 ] && grep -q "does not exist" <<< "$stackError"; then
      echo "${CompletionTime}    DELETE_COMPLETE"
      return 0
    else
      echo "${CompletionTime}    DELETE_FAILED ($stackStatus)"
      return 1
    fi
  fi

  echo "${CompletionTime}    $stackStatus"

  [ "$stackStatus" = "CREATE_COMPLETE" ] || [ "$stackStatus" = "UPDATE_COMPLETE" ]
  return $?
}

get_stack_outputs() {
  Outputs=$(aws cloudformation describe-stacks \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name $1 \
    --query 'Stacks[0].Outputs[*].{Key:OutputKey, Value:OutputValue}' \
    --output text)
  if [ $? -ne 0 ]; then
    echo "cfn-aio: error: failed to query stack outputs"
    exit 1
  fi
}

usage_exit() {
  cat <<- EOF
	usage: cfn-aio <command> [options]
	To see help text, you can run:

	   cfn-aio help
	   cfn-aio <command> help
	$1
	EOF
  exit 1
}

do_help() {
  cat <<- EOF
	Usage:
	   cfn-aio <command> [options]

	Commands:

	   help             Show this help message
	   configure        Configure default values
	   create-remote    Create remote resources
	   create-instance  Create an EC2 instance
	   delete-remote    Delete remote resources
	   delete-instance  Delete an EC2 instance
	   update-remote    Update remote resources
	   update-instance  Update an EC2 instance
	   ssh              SSH into an EC2 instance
	   upload           Upload file(s) to an EC2 instance
	EOF
  exit 0
}

configure_help() {
  cat <<- EOF
	Usage:
	   cfn-aio configure [options]

	Description:
	   The configure command sets default options for cfn-aio. If this
	   command is run with no arguments, you will be prompted for
	   configuration values such as the default region and default AWS CLI
	   profile to use. Values provided via arguments will be validated. If
	   the validation of the value fails, you will be prompted for a valid
	   value.

	   The default options are stored in config/.cfn-aio-config and will be
	   used for cfn-aio commands when not provided to a command as an
	   argument. If the config file does not exist, it will be created for
	   you. When prompted for a value, the current value will be shown in
	   [brackets]. To keep the existing value you may hit enter. Entered
	   values will be validated and if found to be incorrect, you will be
	   prompted again for a valid value.

	Configuration Variables:
	   The following environment variables are supported in the config file:

	   CBD_PROFILE - This is the AWS CLI profile that will be used by
	   default when creating, deleting, or updating resources. The default
	   value when unconfigured is "default".

	   CBD_REGION - This is the AWS region that will be used by default when
	   creating, deleting, or updating resources. The default value when
	   unconfigured is "us-east-2".

	   CBD_REMOTE_NAME - This is the name of the CloudBD remote that will be
	   used by default when creating, deleting, or updating CloudBD remote
	   resources. The default value when unconfigured is "remote".

	   CBD_AVAILABILITY_ZONE - This is the availability zone letter in the
	   CBD_REGION that will be used by default when creating EC2 instances
	   using the create-instance command. Supported values are a-f and must
	   also be valid for the AWS region when creating an EC2 instance. The
	   default value when unconfigured is "a".

	   CBD_SSH_CIDR_RANGE - This value specifies an IPv4 CIDR range that
	   limits the source IPv4 addresses that are allowed to SSH to the EC2
	   instances. More specifically, it is the AWS::EC2::SecurityGroup->
	   SecurityGroupIngress->CidrIp value for the security group that
	   instances created by the create-instance command will use. The
	   default value when unconfigured is "0.0.0.0/0", which allows all
	   source IPv4 addresses to SSH to the instances.

	   CBD_EC2_INSTANCE_TYPE - This is the instance type that will be used
	   by default when creating EC2 instances using the create-instance
	   command. The default value when unconfigured is "t3.small".

	   CBD_EC2_OS - This is the operating system that will be used by
	   default when creating EC2 instances using the create-instance
	   command. Supported operating systems are: amzn1, amzn2, trusty,
	   xenial, and bionic. The default value when unconfigured is "amzn1".

	Options:
	   --profile <AWS CLI profile>
	   	Set the default AWS CLI profile.

	   --region <AWS region>
	   	Set the default cfn-aio region.

	   --remote-name <remote name>
	   	Set the default CloudBD remote name.

	   --availability-zone <zone letter>
	   	Set the default availability zone letter in the region.

	   --ssh-cidr <cidr range>
	   	Set the default SSH Cidr address range.

	   --instance-type <type>
	   	Set the default EC2 instance type.

	   --os <os name>
	   	Set the default operating system for EC2 instances.
	EOF
  exit 0
}

configure() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; configure_help;;
      --profile)
        shift; CBD_PROFILE_NEW="$1"; shift;;
      --region)
        shift; CBD_REGION_NEW="$1"; shift;;
      --remote-name)
        shift; CBD_REMOTE_NAME_NEW="$1"; shift;;
      --availability-zone)
        shift; CBD_AVAILABILITY_ZONE_NEW="$1"; shift;;
      --ssh-cidr)
        shift; CBD_SSH_CIDR_RANGE_NEW="$1"; shift;;
      --instance-type)
        shift; CBD_EC2_INSTANCE_TYPE_NEW="$1"; shift;;
      --os)
        shift; CBD_EC2_OS_NEW="$1"; shift;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--profile <AWS CLI profile>
	--region <AWS region>
	--remote-name <remote name>
	--availability-zone <zone letter>
	--ssh-cidr <cidr range>
	--instance-type <type>
	--os <os name>
	EOF
        )";;
    esac
  done

  while true; do
    if [[ -z ${CBD_PROFILE_NEW} ]]; then
      read -p "Default AWS CLI profile [${CBD_PROFILE}]: " CBD_PROFILE_NEW
      CBD_PROFILE_NEW="${CBD_PROFILE_NEW:-${CBD_PROFILE}}"
    fi
    if [[ "${CBD_PROFILE_NEW}" == "default" ]]; then
      if grep -q "\[${CBD_PROFILE_NEW}\]" ~/.aws/config; then
        CBD_PROFILE="${CBD_PROFILE_NEW}"
        break;
      else
        cat <<- EOF
	cfn-aio: error: The AWS CLI default profile is not configured.

	Please run 'aws configure' and try again.
	EOF
        exit 1
      fi
    else
      if grep -q "\[profile ${CBD_PROFILE_NEW}\]" ~/.aws/config; then
        CBD_PROFILE="${CBD_PROFILE_NEW}"
        break;
      else
        cat <<- EOF
	Profile ${CBD_PROFILE_NEW} is not configured in the AWS CLI. Please select
	an existing AWS CLI profile.
	EOF
        CBD_PROFILE_NEW=""
      fi
    fi
  done

  while true; do
    if [[ -z ${CBD_REGION_NEW} ]]; then
      read -p "Default AWS region name [${CBD_REGION}]: " CBD_REGION_NEW
      CBD_REGION_NEW="${CBD_REGION_NEW:-${CBD_REGION}}"
    fi
    if validate_region "${CBD_REGION_NEW}"; then
      CBD_REGION="${CBD_REGION_NEW}"
      break
    else
      cat <<- EOF
	Invalid or unsupported region provided. Supported regions are:

	us-east-1	us-east-2	us-west-1	us-west-2
	eu-west-1	eu-west-2	eu-west-3	eu-central-1
	ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
	ap-south-1	ca-central-1	sa-east-1
	EOF
      CBD_REGION_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_REMOTE_NAME_NEW} ]]; then
      read -p "Default remote name [${CBD_REMOTE_NAME}]: " CBD_REMOTE_NAME_NEW
      CBD_REMOTE_NAME_NEW="${CBD_REMOTE_NAME_NEW:-${CBD_REMOTE_NAME}}"
    fi

    if validate_name ${CBD_REMOTE_NAME_NEW}; then
      CBD_REMOTE_NAME="${CBD_REMOTE_NAME_NEW}"
      break;
    else
      cat <<- EOF
	Remote names must start with a letter and contain alpha-numeric characters and
	hyphens only. 32 characters max.
	EOF
      CBD_REMOTE_NAME_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_AVAILABILITY_ZONE_NEW} ]]; then
      read -p "Default availability zone letter in ${CBD_REGION} for EC2 [${CBD_AVAILABILITY_ZONE}]: " CBD_AVAILABILITY_ZONE_NEW
      CBD_AVAILABILITY_ZONE_NEW="${CBD_AVAILABILITY_ZONE_NEW:-${CBD_AVAILABILITY_ZONE}}"
    fi

    if validate_availability_zone ${CBD_AVAILABILITY_ZONE_NEW}; then
      CBD_AVAILABILITY_ZONE="${CBD_AVAILABILITY_ZONE_NEW}"
      break;
    else
      echo "Invalid or unsupported availability zone. Enter a-f"
      CBD_AVAILABILITY_ZONE_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_SSH_CIDR_RANGE_NEW} ]]; then
      read -p "Default IpV4 address range in CIDR format that may SSH in to EC2 instances [${CBD_SSH_CIDR_RANGE}]: " CBD_SSH_CIDR_RANGE_NEW
      CBD_SSH_CIDR_RANGE_NEW="${CBD_SSH_CIDR_RANGE_NEW:-${CBD_SSH_CIDR_RANGE}}"
    fi

    if validate_cidr ${CBD_SSH_CIDR_RANGE_NEW}; then
      CBD_SSH_CIDR_RANGE="${CBD_SSH_CIDR_RANGE_NEW}"
      break;
    else
      echo "The provided value is not in CIDR format. Please enter a valid CIDR value."
      CBD_SSH_CIDR_RANGE_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_EC2_INSTANCE_TYPE_NEW} ]]; then
      read -p "Default instance type for EC2 [${CBD_EC2_INSTANCE_TYPE}]: " CBD_EC2_INSTANCE_TYPE_NEW
      CBD_EC2_INSTANCE_TYPE_NEW="${CBD_EC2_INSTANCE_TYPE_NEW:-${CBD_EC2_INSTANCE_TYPE}}"
    fi

    if check_instance_type ${CBD_EC2_INSTANCE_TYPE_NEW}; then
      CBD_EC2_INSTANCE_TYPE="${CBD_EC2_INSTANCE_TYPE_NEW}"
      break;
    else
      echo "Invalid or unsupported instance type provided."
      CBD_EC2_INSTANCE_TYPE_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_EC2_OS_NEW} ]]; then
      read -p "Default operating system for EC2 [${CBD_EC2_OS}]: " CBD_EC2_OS_NEW
      CBD_EC2_OS_NEW="${CBD_EC2_OS_NEW:-${CBD_EC2_OS}}"
    fi

    if validate_os ${CBD_EC2_OS_NEW}; then
      CBD_EC2_OS="${CBD_EC2_OS_NEW}"
      break;
    else
      cat <<- EOF
	Invalid or unsupported operating system provided. Supported operating systems are:

	amzn1		Amazon Linux AMI
	amzn2		Amazon Linux 2
	trusty		Ubuntu 14.04 LTS / trusty
	xenial		Ubuntu 16.04 LTS / xenial
	bionic		Ubuntu 18.04 LTS / bionic
	EOF
      CBD_EC2_OS_NEW=""
    fi
  done

  cat <<- EOF > ${CBD_CONFIG_FILE}
	CBD_PROFILE="${CBD_PROFILE}"
	CBD_REGION="${CBD_REGION}"
	CBD_REMOTE_NAME="${CBD_REMOTE_NAME}"
	CBD_AVAILABILITY_ZONE="${CBD_AVAILABILITY_ZONE}"
	CBD_SSH_CIDR_RANGE="${CBD_SSH_CIDR_RANGE}"
	CBD_EC2_INSTANCE_TYPE="${CBD_EC2_INSTANCE_TYPE}"
	CBD_EC2_OS="${CBD_EC2_OS}"
	EOF

  if [ ! -f config/credentials.json ]; then
    cat <<- EOF

	   In order to use cfn-aio the CloudBD credentials.json file needs to be
	   in the following directory:

	      ${REPO_PATH}/config

	   The CloudBD credentials.json file can be downloaded after logging in or
	   signing up at:

	      https://manage.cloudbd.io
	EOF
  fi
}

create_remote_help() {
  cat <<- EOF
	Usage:
	   cfn-aio create-remote [options]

	Description:
	   The create-remote command creates the AWS resources needed for CloudBD
	   EC2 instances. The resources are created using the AWS CLI using either
	   the default configured profile or the profile provided via the
	   --profile option. The AWS CLI and a CloudFormation template are used
	   in this process. The AWS CLI profile must have the rights to create
	   the resources outlined below.

	   After creating the AWS resources the create-remote command creates
	   a CloudBD remote config file that is stored in the S3 bucket along
	   with a copy of the CloudBD credentials.json file. When EC2 instances
	   are created they download these files to complete their configuration.

	   The resources created via this command may be removed by the
	   delete-remote command, provided all CloudBD disks and the EC2
	   instances have been deleted first. See the delete-remote command for
	   details.

	Resources:
	   Unless otherwise specified, the following resources are created via a
	   CloudFormation template in templates/cloudbd-resources.yml and uses
	   the 'aws cloudformation create-stack' command to create the
	   resources:

	   SSH key-pair - This key-pair provides SSH access to the EC2 instances
	   created via the create-instance command. It is created using 'aws ec2
	   create-key-pair' command. The PEM encoded RSA private key for this
	   key is stored in the config sub-directoy.

	   S3 Bucket - This bucket is where CloudBD disks will store their data.
	   The bucket name is not specified in the template so a unique name
	   will be created by CloudFormation.

	   IAM User - This user is created with an inline policy that grants it
	   the rights needed for CloudBD disks to use the S3 bucket to store
	   data. The user name is not specified in the template so a unique
	   name will be created by CloudFormation. After the stack is created,
	   an access key is created using 'aws iam create-access-key' and the
	   AccessKeyId and SecretAccessKey are saved in the CloudBD remote conf
	   file. CloudBD disks use the IAM User's access key to write to the S3
	   bucket.

	   EC2 VPC - This VPC is created with an S3 endpoint and other
	   associated resources needed for CloudBD EC2 instances. EC2 instances
	   created via the create-instance command use this VPC. The VPC
	   includes Subnets for all availability zones in the region, an
	   InternetGateway, an S3 VPCEndpoint, Routing Table and attachments.
	   See the cloudbd-resources template for details.

	   EC2 SecurityGroup - The SecurityGroup is created with SSH access from
	   the internet limited by the configured default SSH IpV4 Cidr value or
	   by the --ssh-cidr option if provided. EC2 instances created via the
	   create-instance command use this SecurityGroup.

	Options:
	   When options are provided they override the default configured values
	   that were set with the configure command. When an option is not
	   provided the default configured value will be used.

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The region to create CloudBD resources in.

	   --remote-name <remote name>
	   	A unique name for the remote within the region. It must start with
	   	a letter and contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   --ssh-cidr <cidr range>
	   	The SSH Cidr address range that is allowed to SSH into EC2
	   	instances. The '0.0.0.0/0' value does not limit SSH source
	   	addresses.
	EOF
  exit 0
}

create_remote() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; create_remote_help;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --remote-name)
        if validate_name "$2"; then
          CBD_REMOTE_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --remote_name: Invalid remote name provided.

		Remote names must start with a letter and contain alpha-numeric characters and
		hyphens only. 32 characters max.
		EOF
          exit 1
        fi
	;;
      --ssh-cidr)
	if validate_cidr "$2"; then
          CBD_SSH_CIDR_RANGE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --ssh-cidr: Invalid ssh cidr range provied."
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--profile <AWS CLI profile>
	--region <AWS region>
	--remote-name <remote name>
	--ssh-cidr <cidr range>
	EOF
        )";;
    esac
  done

  check_credentials

  build_all_availability_zones

  local SSHKeyName="cloudbd-${CBD_REMOTE_NAME}-${CBD_REGION}-key"
  local SSHKeyFile="config/${SSHKeyName}.pem"
  local RemoteConfFile="config/${CBD_REMOTE_NAME}-${CBD_REGION}.conf"
  local RemoteStackName="cloudbd-resources-${CBD_REMOTE_NAME}"

  if aws ec2 describe-key-pairs \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --key-name ${SSHKeyName} >/dev/null 2>&1; then
    echo "EC2 key-pair ${SSHKeyName} already exists, using existing key-pair."
    if [ ! -f ${SSHKeyFile} ]; then
      echo "WARNING: Missing EC2 key-pair file ${SSHKeyFile}. This file is needed for SSH access to EC2 nodes."
    fi
  else
    umask 077;
    if aws ec2 create-key-pair \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --key-name ${SSHKeyName} \
      --query KeyMaterial \
      --output text > ${SSHKeyFile}; then
      echo "Created ec2 key-pair ${SSHKeyName} and key file ${SSHKeyFile}"
    else
      echo "Failed to create ec2 key-pair"
      exit 1
    fi
  fi

  echo "Creating CloudFormation stack ${RemoteStackName} in ${CBD_REGION}"

  aws cloudformation create-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-resources.yml \
    --stack-name ${RemoteStackName} \
    --capabilities CAPABILITY_IAM \
    --parameters \
        ParameterKey=SSHLocation,ParameterValue=${CBD_SSH_CIDR_RANGE} \
        ParameterKey=AvailabilityZones,ParameterValue=\"${CBD_ALL_AVAILABILITY_ZONES}\" > /dev/null

  [ $? -eq 0 ] && cloudformation_tail ${RemoteStackName} || exit $?

  get_stack_outputs ${RemoteStackName}
  local BucketName=$(grep BucketName <<< "${Outputs}" | awk '{print $2}')
  local UserName=$(grep UserName <<< "${Outputs}" | awk '{print $2}')

  local AccessKeyOutput=$(aws iam create-access-key \
    --profile ${CBD_PROFILE} \
    --user-name "${UserName}" \
    --query 'AccessKey.{ Id:AccessKeyId, Key:SecretAccessKey }' \
    --output text)
  if [ $? -ne 0 ]; then
    echo "Failed to create access key for user ${UserName}"
    exit 1
  fi

  local AccessKeyId=$(awk '{print $1}' <<< "${AccessKeyOutput}")
  local SecretKey=$(awk '{print $2}' <<< "${AccessKeyOutput}")

  umask 077;
  cat <<- EOF > ${RemoteConfFile}
	type = s3_v4
	endpoint_url = http://s3.${CBD_REGION}.amazonaws.com
	region = ${CBD_REGION}
	bucket = ${BucketName}
	access_key_id = ${AccessKeyId}
	secret_key = ${SecretKey}
	EOF

  echo "Created CloudBD configuration file ${RemoteConfFile}"

  aws s3 cp \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
    ${RemoteConfFile} s3://${BucketName}/config/${CBD_REMOTE_NAME}.conf

  aws s3 cp \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
    config/credentials.json s3://${BucketName}/config/credentials.json

  echo "Remote '${CBD_REMOTE_NAME}' created successfully in ${CBD_REGION}"
}

delete_remote_help() {
  cat <<- EOF
	Usage:
	   cfn-aio delete-remote [options]

	Description:
	   The delete-remote command deletes the AWS resources created by the
	   create-remote command. The AWS CLI and CloudFormtion are used in the
	   process of deleting the resources. The AWS CLI profile must have the
	   rights to delete the resources outlined in the create-remote command
	   help.

	   Prior to running this command, all CloudBD disks must be deleted so
	   that the S3 bucket is empty. In addition, any EC2 instances created
	   using this remote with the create-instance command must be deleted first.

	   The S3 bucket is checked to ensure that all CloudBD disks have been
	   deleted. If there are undeleted CloudBD disks, the delete-remote
	   command will not proceed. CloudBD disks may be deleted using an EC2
	   instance that has been created in the same region using the
	   create-instance command. Do not delete the CloudBD disk data using
	   the AWS CLI or the AWS web console. Using a CloudBD EC2 instance,
	   the 'cloudbd destroy' command will quickly delete all the data
	   previously stored on the disk using multiple parallel delete
	   operations.

	   When it has been confirmed no CloudBD disk data remains, the two
	   uploaded configuration files from the create-remote command are
	   deleted from the S3 bucket and the CloudFormation stack is deleted
	   via 'aws cloudformation delete-stack' command. After the stack has
	   been deleted, the remote SSH key-pair will also be deleted.

	   Upon the succesful completion of the delete-remote command, all
	   AWS resources created via the cfn-aio tool will have been removed
	   from the region.

	Options:
	   When options are provided they override the default configured values
	   that were set with the configure command. When an option is not
	   provided the default configured value will be used.

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The AWS region where the remote was created.

	   --remote-name <remote name>
	   	The remote name that was used to create the remote.
	EOF
  exit 0
}

delete_remote() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; delete_remote_help;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --remote-name)
        if validate_name "$2"; then
          CBD_REMOTE_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --remote_name: Invalid remote name provided.

		Remote names must start with a letter and contain alpha-numeric characters and
		hyphens only. 32 characters max.
		EOF
          exit 1
        fi
	;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--profile <AWS CLI profile>
	--region <AWS region>
	--remote-name <remote name>
	EOF
        )";;
    esac
  done

  local SSHKeyName="cloudbd-${CBD_REMOTE_NAME}-${CBD_REGION}-key"
  local SSHKeyFile="config/${SSHKeyName}.pem"
  local RemoteConfFile="config/${CBD_REMOTE_NAME}-${CBD_REGION}.conf"
  local RemoteStackName="cloudbd-resources-${CBD_REMOTE_NAME}"

  get_stack_outputs ${RemoteStackName}
  local BucketName=$(grep BucketName <<< "${Outputs}" | awk '{print $2}')

  # if stack failed to create the bucket, then skip checking for undeleted disks
  # and the config removal
  if [[ -n ${BucketName} ]] && aws s3api head-bucket \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
    --bucket ${BucketName} >/dev/null 2>&1 ; then
    if aws s3 ls \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
      --recursive \
      s3://${BucketName}/cloudbd/ > /dev/null; then
      cat <<- EOF
	ERROR: Can not delete remote resources while CloudBD disks remain
	configured. Please delete your CloudBD disks before deleting your
	remote resources using a CloudBD EC2 instance.

	   Stop and unconfigure all CloudBD disks in this remote
	      https://www.cloudbd.io/docs/gs-manage-disks.html#detach-a-disk

	   To list all existing disks:
	      cloudbd list ${CBD_REMOTE_NAME}

	   To delete a CloudBD disk that is not running:
	      cloudbd destroy ${CBD_REMOTE_NAME}:mydiskname

	When all disks have been stopped and deleted you can delete the
	CloudBD instance and remote resources.
	EOF
      exit 1
    fi

    aws s3 rm  \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
      s3://${BucketName}/config/credentials.json > /dev/null

    aws s3 rm \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
      s3://${BucketName}/config/${CBD_REMOTE_NAME}.conf > /dev/null
  fi

  echo "Deleting CloudFormation stack ${RemoteStackName} in ${CBD_REGION}"

  aws cloudformation delete-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name ${RemoteStackName}

  [ $? -eq 0 ] && cloudformation_tail ${RemoteStackName} deleting || exit $?

  echo "Deleted stack ${RemoteStackName} in ${CBD_REGION}"

  if [ -f ${RemoteConfFile} ]; then
    rm ${RemoteConfFile} && echo "Deleted file ${RemoteConfFile}"
  fi

  if aws ec2 describe-key-pairs \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --key-name ${SSHKeyName} >/dev/null 2>&1; then
    if aws ec2 delete-key-pair \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --key-name ${SSHKeyName}; then
      echo "Deleted EC2 key pair ${SSHKeyName}"
      if [ -f "${SSHKeyFile}" ]; then
        rm ${SSHKeyFile} && echo "Deleted file ${SSHKeyFile}"
      fi
    else
      echo "Failed to delete key pair ${SSHKeyName}"
    fi
  else
    if [ -f "${SSHKeyFile}" ]; then
      rm ${SSHKeyFile} && echo "Deleted file ${SSHKeyFile}"
    fi
  fi
}

update_remote_help() {
  cat <<- EOF
	Usage:
	   cfn-aio update-remote --ssh-cidr <cidr range> [options]

	Description:
	   The update-remote command updates previously created AWS resources
	   via the create-remote command. This command can be used to modify
	   the SSH IpV4 Cidr range of an existing remote or to update the remote
	   should changes be made to the remote template.

	   The resources are updated by issuing an 'aws cloudformation
	   update-stack' command. The AWS CLI profile must have the rights to
	   update the CloudFormation resources outlined in the create-remote
	   command help.

	Options:
	   Required options:

	   --ssh-cidr <cidr range>
	   	The SSH Cidr address range that is allowed to SSH into EC2
	   	instances. The '0.0.0.0/0' value does not limit SSH source
	   	addresses.

	   When options are provided they override the default configured values
	   that were set with the configure command. When an option is not
	   provided the default configured value will be used.

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The AWS region to update CloudBD resources in.

	   --remote-name <remote name>
	   	The remote name that was used to create the remote.
	EOF
  exit 0
}

update_remote() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; update_remote_help;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --remote-name)
        if validate_name "$2"; then
          CBD_REMOTE_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --remote_name: Invalid remote name provided.

		Remote names must start with a letter and contain alpha-numeric characters and
		hyphens only. 32 characters max.
		EOF
          exit 1
        fi
	;;
      --ssh-cidr)
	if validate_cidr "$2"; then
          CBD_SSH_CIDR_RANGE_NEW="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --ssh-cidr: Invalid ssh cidr range provied."
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--profile <AWS CLI profile>
	--region <AWS region>
	--remote-name <remote name>
	--ssh-cidr <cidr range>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_SSH_CIDR_RANGE_NEW} ]]; then
    usage_exit "cfn-aio: error: argument --ssh-cidr: Missing required argument --ssh-cidr"
  fi

  CBD_SSH_CIDR_RANGE=${CBD_SSH_CIDR_RANGE_NEW}
  local RemoteStackName="cloudbd-resources-${CBD_REMOTE_NAME}"

  build_all_availability_zones

  echo "Updating CloudFormation stack ${RemoteStackName}"

  aws cloudformation update-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-resources.yml \
    --stack-name ${RemoteStackName} \
    --capabilities CAPABILITY_IAM \
    --parameters \
        ParameterKey=SSHLocation,ParameterValue=${CBD_SSH_CIDR_RANGE} \
        ParameterKey=AvailabilityZones,ParameterValue=\"${CBD_ALL_AVAILABILITY_ZONES}\" > /dev/null

  [ $? -eq 0 ] && cloudformation_tail ${RemoteStackName} || exit $?
}

create_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio create-instance --name <instance name> [options]

	Description:
	   The create-instance command creates an EC2 instance and configures it
	   with CloudBD software. The resources are created using the AWS
	   CLI using either the default configured profile or the profile
	   provided via the --profile option. The AWS CLI and a CloudFormation
	   template are used in this process. The AWS CLI profile must have the
	   rights to create an EC2 instance.

	   The instance is created using the remote SSH key-pair and
	   SecurityGroup which allows SSH access to the instance (limited by the
	   SSH IpV4 Cidr address range). You may SSH into the instance in the
	   typical manor, or utilize the 'cfn-aio ssh' command for convenience.
	   The SSH private key for the region will be located here after the
	   create-remote command has been run:

	      config/cloudbd-${CBD_REMOTE_NAME}-${CBD_REGION}-key.pem

	   The instance will be ready to create CloudBD disks and begin using
	   them. Please see the CloudBD documentation on how to create and
	   manage CloudBD disks:

	      https://www.cloudbd.io/docs/gs-manage-disks.html

	   Instances may be deleted by using the delete-instance command. It is
	   recommended that the CloudBD disks be detached and deleted prior to
	   deleting an instance. CloudBD disk data will remain in the remote
	   S3 bucket until they are deleted. Undeleted disks will prevent the
	   remote S3 bucket from being deleted.

	Options:
	   Required options:

	   --name <instance name>
	   	A unique name for the instance within the region. It must start
	   	with a letter and contain alpha-numeric characters and hyphens
	   	only. 32 characters max.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The region to create CloudBD EC2 instance in.

	   --remote-name <remote name>
	   	The remote name to associate the newly created instance to.

	   --availability-zone <zone letter>
	   	The availability zone letter in the region. Must be a-f and be
	   	valid for the region.

	   --instance-type <type>
	   	The EC2 instance type. e.g. t2.micro, m5.large, etc.

	   --os <os name>
	   	The operating system to use for the EC2 instance. Supported
	   	values are: amzn1, amzn2, trusty, xenial, bionic.
	EOF
  exit 0
}

create_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; create_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --remote-name)
        if validate_name "$2"; then
          CBD_REMOTE_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --remote_name: Invalid remote name provided.

		Remote names must start with a letter and contain alpha-numeric characters and
		hyphens only. 32 characters max.
		EOF
          exit 1
        fi
	;;
      --os)
	if validate_os "$2"; then
          CBD_EC2_OS="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --os: Invalid or unsupported operating system provided.
		Supported operating systems are:

		amzn1		Amazon Linux AMI
		amzn2		Amazon Linux 2
		trusty		Ubuntu 14.04 LTS / trusty
		xenial		Ubuntu 16.04 LTS / xenial
		bionic		Ubuntu 18.04 LTS / bionic
		EOF
          exit 1
        fi
        ;;
      --availability-zone)
	if validate_availability_zone "$2"; then
          CBD_AVAILABILITY_ZONE="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --availability-zone: Invalid zone letter provided.

		Availability zone must be a letter in the range a-f.
		EOF
          exit 1
        fi
        ;;
      --instance-type)
        CBD_EC2_INSTANCE_TYPE="$2"; shift 2;
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS CLI profile>
	--region <AWS region>
	--remote-name <remote name>
	--availability-zone <zone letter>
	--instance-type <type>
	--os <os name>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  if ! check_availability_zone ${CBD_AVAILABILITY_ZONE}; then
    echo "cfn-aio: error: availability zone invalid; availability zone ${CBD_AVAILABILITY_ZONE} in region ${CBD_REGION} is not available"
    exit 1
  fi

  if ! check_instance_type "${CBD_EC2_INSTANCE_TYPE}"; then
    echo "cfn-aio: error: instance type invalid"
    exit 1
  fi

  local EC2StackName="cloudbd-ec2-${CBD_EC2_NAME}"
  local SSHKeyName="cloudbd-${CBD_REMOTE_NAME}-${CBD_REGION}-key"
  local RemoteStackName="cloudbd-resources-${CBD_REMOTE_NAME}"

  get_stack_outputs ${RemoteStackName}
  local BucketName=$(grep BucketName <<< "${Outputs}" | awk '{print $2}')

  if [[ ! -n ${BucketName} ]]; then
    echo "cfn-aio: error: missing required region bucket: probably due to create-remote failure"
    exit 1
  fi

  local CredentialsURL="$(aws s3 presign \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --expires-in 600 \
    --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
    s3://${BucketName}/config/credentials.json)"

  local RemoteConfURL="$(aws s3 presign \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --expires-in 600 \
    --endpoint-url https://s3.${CBD_REGION}.amazonaws.com \
    s3://${BucketName}/config/${CBD_REMOTE_NAME}.conf)"

  echo "Creating CloudFormation stack ${EC2StackName} in ${CBD_REGION}"

  aws cloudformation create-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-ec2-${CBD_EC2_OS}.yml \
    --stack-name ${EC2StackName} \
    --disable-rollback \
    --parameters \
        ParameterKey=InstanceName,ParameterValue=${CBD_EC2_NAME} \
        ParameterKey=RemoteName,ParameterValue=${CBD_REMOTE_NAME} \
        ParameterKey=KeyName,ParameterValue=${SSHKeyName} \
        ParameterKey=CredentialsURL,ParameterValue=${CredentialsURL} \
        ParameterKey=RemoteConfURL,ParameterValue=${RemoteConfURL} \
        ParameterKey=InstanceType,ParameterValue=${CBD_EC2_INSTANCE_TYPE} \
        ParameterKey=AvailabilityZone,ParameterValue=${CBD_AVAILABILITY_ZONE} > /dev/null

  [ $? -eq 0 ] && cloudformation_tail ${EC2StackName} || exit $?
}

delete_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio delete-instance --name <instance name> [options]

	Description:
	   The delete-instance command deletes an instance previously created
	   by the create-instance command. The instance is deleted using the
	   AWS CLI using either the default configured profile or the profile
	   provided via the --profile option. The AWS CLI and CloudFormation
	   are used in this process. The AWS CLI profile must have the rights
	   to delete an EC2 instance using CloudFormation.

	   It is recommended that the CloudBD disks be detached and deleted
	   prior to deleting an instance. CloudBD disk data will remain in the
	   remote S3 bucket until they are deleted. Undeleted disks will
	   prevent the remote S3 bucket from being deleted. Do not delete the
	   CloudBD disk data using the AWS CLI or the AWS web console. The
	   steps for detaching and deleting CloudBD disks may be found here:

	      https://www.cloudbd.io/docs/gs-manage-disks.html

	Options:
	   Required options:

	   --name <instance name>
	   	The unique name for the instance within the region. It must start
	   	with a letter and contain alpha-numeric characters and hyphens
	   	only. 32 characters max.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The AWS region to delete CloudBD resources in.
	EOF
  exit 0
}

delete_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; delete_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS CLI profile>
	--region <AWS region>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  local EC2StackName="cloudbd-ec2-${CBD_EC2_NAME}"

  echo "Deleting CloudFormation stack ${EC2StackName} in ${CBD_REGION}"

  aws cloudformation delete-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name ${EC2StackName}

  [ $? -eq 0 ] && cloudformation_tail ${EC2StackName} deleting || exit $?
}

update_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio update-instance --name <instance name> --instance-type <type> [options]

	Description:
	   The update-instance command updates an instance previouly created
	   via the create-instance command. This command can be used to modify
	   the instance type of an existing instance or to update the instance
	   should changes be made to the instance template.

	   The instance is updated by issuing an 'aws cloudformation
	   update-stack' command. The AWS CLI profile must have the rights to
	   update the CloudFormation stack containing the EC2 instance.

	   The region and name must all match an existing instance and may not
	   be changed to new values by this command.

	Options:
	   Required options:

	   --name <instance name>
	   	The unique name for the instance. Must start with a letter and
	   	contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   --instance-type <type>
	   	The EC2 instance type. e.g. t2.micro, m5.large, etc.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The region with the CloudBD EC2 instance.
	EOF
  exit 0
}

update_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; update_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --instance-type)
        CBD_EC2_INSTANCE_TYPE_NEW="$2"; shift 2;
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS CLI profile>
	--region <AWS region>
	--availability-zone <zone letter>
	--instance-type <type>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  if [[ ! -n ${CBD_EC2_INSTANCE_TYPE_NEW} ]]; then
    usage_exit "cfn-aio: error: argument --instance-type: Missing required argument --instance-type"
  fi

  if ! check_instance_type "${CBD_EC2_INSTANCE_TYPE_NEW}"; then
    echo "cfn-aio: error: instance type invalid"
    exit 1
  fi
  CBD_EC2_INSTANCE_TYPE=${CBD_EC2_INSTANCE_TYPE_NEW}

  local EC2StackName="cloudbd-ec2-${CBD_EC2_NAME}"

  get_stack_outputs ${EC2StackName}
  local InstanceId=$(grep InstanceId <<< "${Outputs}" | awk '{print $2}')
  local OperatingSystem=$(grep OperatingSystem <<< "${Outputs}" | awk '{print $2}')
  local RemoteName=$(grep RemoteName <<< "${Outputs}" | awk '{print $2}')
  local SSHKeyName="cloudbd-${RemoteName}-${CBD_REGION}-key"

  if [[ ! -n ${InstanceId} ]]; then
    echo "cfn-aio: error: instance id: Unable to query instance id"
    exit 1
  fi

  local Zone=$(aws ec2 describe-instances \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --instance-ids ${InstanceId} \
    --query 'Reservations[].Instances[].Placement.AvailabilityZone' \
    --output text)

  if [[ ! -n ${Zone} ]]; then
    echo "cfn-aio: error: availability zone: Unable to query availability zone"
    exit 1
  fi

  echo "Updating CloudFormation stack ${EC2StackName} in ${CBD_REGION}"

  aws cloudformation update-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-ec2-${OperatingSystem}.yml \
    --stack-name ${EC2StackName} \
    --parameters \
        ParameterKey=InstanceName,ParameterValue=${CBD_EC2_NAME} \
        ParameterKey=RemoteName,ParameterValue=${RemoteName} \
        ParameterKey=KeyName,ParameterValue=${SSHKeyName} \
        ParameterKey=InstanceType,ParameterValue=${CBD_EC2_INSTANCE_TYPE} \
        ParameterKey=AvailabilityZone,ParameterValue=${Zone: -1} > /dev/null

  [ $? -eq 0 ] && cloudformation_tail ${EC2StackName} || exit $?
}

ssh_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio ssh --name <instance name> [options] [-- ssh options]

	Description:
	   The ssh command SSH's into an existing EC2 instance created with the
	   create-instance command. Using the required --name argument together
	   with the region, the current public DNS address and operating system
	   is queryed using the AWS CLI and an ssh command is executed with the
	   following values:

	      ssh -i config/cloudbd-<region>-<remote name>-key.pem \\
	         <username>@<public dns> <ssh options>

	   Where <region> is the region value for the instance, <remote name> is
	   the name of the remote used when creating the instance, <username> is
	   either 'ec2-user' for amzn1 and amzn2 instances or 'ubuntu' for Ubuntu
	   instances, and <public dns> is the DNS address that was obtained by
	   using the AWS CLI.

	   If the optional -- argment is provided, anything following -- will
	   be passed to ssh as additional arguments.

	Options:
	   Required options:

	   --name <instance name>
	   	The unique name for the instance. Must start with a letter and
	   	contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The region with the CloudBD EC2 instance.

	   -- <ssh options>
	   	Arguments to pass to SSH.
	EOF
  exit 0
}

ssh_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; ssh_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --)
        shift
        EC2_SSH_ARGUMENTS="$@"
        break
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS CLI profile>
	--region <AWS region>
	-- <arguments to pass to ssh command>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  local EC2StackName="cloudbd-ec2-${CBD_EC2_NAME}"

  get_stack_outputs ${EC2StackName}
  local InstanceId=$(grep InstanceId <<< "${Outputs}" | awk '{print $2}')
  local OperatingSystem=$(grep OperatingSystem <<< "${Outputs}" | awk '{print $2}')
  local RemoteName=$(grep RemoteName <<< "${Outputs}" | awk '{print $2}')

  local SSHKeyName="cloudbd-${RemoteName}-${CBD_REGION}-key"
  local SSHKeyFile="config/${SSHKeyName}.pem"

  local EC2PublicDns=$(aws ec2 describe-instances \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --instance-ids ${InstanceId} \
    --query 'Reservations[].Instances[].PublicDnsName' \
    --output text)

  case "${OperatingSystem}" in
    amzn1|amzn2|rhel7)
      local Username="ec2-user";;
    trusty|xenial|bionic)
      local Username="ubuntu";;
    centos7)
      local Username="centos";;
  esac

  exec ssh -i ${SSHKeyFile} ${Username}@${EC2PublicDns} ${EC2_SSH_ARGUMENTS}
}

upload_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio upload --name <instance name> [options] -- <list of files>

	Description:
	   The upload command uploads files to an existing EC2 instance created
	   with the create-instance command. Using the required --name argument
	   together with the region, the current public DNS address and operating
	   system is queryed using the AWS CLI and an scp command is executed
	   with the following values:

	      scp -i config/cloudbd-<region>-<remote name>-key.pem \\
	         <list of files> <username>@<public dns>:

	   Where <region> is the region value for the instance, <remote name> is
	   the name of the remote used when creating the instance, <username> is
	   either 'ec2-user' for amzn1 and amzn2 instances or 'ubuntu' for Ubuntu
	   instances, <public dns> is the DNS address that was obtained by using
	   the AWS CLI and <list of files> is one more files to upload to the
	   EC2 instance.

	Options:
	   Required options:

	   --name <instance name>
	   	The unique name for the instance. Must start with a letter and
	   	contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   -- <list of files>
	   	One or more file paths to local files to upload to the EC2
	   	instance. The -- option must be the last option provided.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS CLI profile>
	   	The AWS CLI profile to use.

	   --region <AWS region>
	   	The region with the CloudBD EC2 instance.
	EOF
  exit 0
}

upload_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; upload_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS CLI profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --)
        shift
        EC2_SCP_FILE_AGS="$@"
        break
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS CLI profile>
	--region <AWS region>
	-- <list of files to upload>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  if [[ ! -n ${EC2_SCP_FILE_AGS} ]]; then
    usage_exit "cfn-aio: error: argument -- <list of files>: Missing required argument -- <list of files>"
  fi

  local EC2StackName="cloudbd-ec2-${CBD_EC2_NAME}"

  get_stack_outputs ${EC2StackName}
  local InstanceId=$(grep InstanceId <<< "${Outputs}" | awk '{print $2}')
  local OperatingSystem=$(grep OperatingSystem <<< "${Outputs}" | awk '{print $2}')
  local RemoteName=$(grep RemoteName <<< "${Outputs}" | awk '{print $2}')

  local SSHKeyName="cloudbd-${RemoteName}-${CBD_REGION}-key"
  local SSHKeyFile="config/${SSHKeyName}.pem"

  local EC2PublicDns=$(aws ec2 describe-instances \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --instance-ids ${InstanceId} \
    --query 'Reservations[].Instances[].PublicDnsName' \
    --output text)

  case "${OperatingSystem}" in
    amzn1|amzn2|rhel7)
      local Username="ec2-user";;
    trusty|xenial|bionic)
      local Username="ubuntu";;
    centos7)
      local Username="centos";;
  esac

  exec scp -i ${SSHKeyFile} ${EC2_SCP_FILE_AGS} ${Username}@${EC2PublicDns}:
}

if [[ $# -eq 0 ]]; then
  usage_exit "cfn-aio: error: too few arguments"
fi

case "$1" in
  help)
    shift; do_help;;
  configure)
    shift; configure "$@";;
  create-remote)
    shift; create_remote "$@";;
  create-instance)
    shift; create_instance "$@";;
  delete-remote)
    shift; delete_remote "$@";;
  delete-instance)
    shift; delete_instance "$@";;
  update-remote)
    shift; update_remote "$@";;
  update-instance)
    shift; update_instance "$@";;
  ssh)
    shift; ssh_instance "$@";;
  upload)
    shift; upload_instance "$@";;
  *)
    usage_exit "$(cat <<- EOF
	cfn-aio: error: argument command: Invalid choice, valid choices are:

	help
	configure
	create-remote
	create-instance
	delete-remote
	delete-instance
	update-remote
	update-instance
	ssh
	upload
	EOF
    )";;
esac

exit 0
