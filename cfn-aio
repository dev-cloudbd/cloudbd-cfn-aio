#!/bin/bash
#
# Copyright (c) 2018 CloudBD, LLC
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# change the working dir to the top of the repo
REPO_PATH=$(dirname $(python -c "import os; print(os.path.realpath('${BASH_SOURCE[0]}'))"))
cd ${REPO_PATH}

CBD_CONFIG_FILE="./config/.cfn-aio-config"

if [ -f ${CBD_CONFIG_FILE} ]; then
  source ${CBD_CONFIG_FILE}
fi

# default values for unconfigured use
CBD_PROFILE="${CBD_PROFILE:-default}"
CBD_REGION="${CBD_REGION:-us-east-1}"
CBD_AVAILABILITY_ZONE="${CBD_AVAILABILITY_ZONE:-a}"
CBD_SSH_CIDR_RANGE="${CBD_SSH_CIDR_RANGE:-0.0.0.0/0}"
CBD_EC2_INSTANCE_TYPE="${CBD_EC2_INSTANCE_TYPE:-t2.micro}"
CBD_EC2_OS="${CBD_EC2_OS:-amzn1}"

validate_region() {
  case "$1" in
    us-east-1|us-east-2|us-west-1|us-west-2|eu-west-1|eu-west-2|eu-west-3|eu-central-1|ap-northeast-1|ap-northeast-2|ap-southeast-1|ap-southeast-2|ap-south-1|ca-central-1|sa-east-1)
      return 0;;
    *)
      return 1;;
  esac
}

validate_profile() {
  if [[ "$1" == "default" ]]; then
    grep -q "\[default\]" ~/.aws/config
  else
    grep -q "\[profile ${CBD_PROFILE_NEW}\]" ~/.aws/config
  fi
  return $?;
}


validate_cidr() {
  local REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}\/([0-9]|[1-2][0-9]|3[0-2])$'
  [[ $1 =~ $REGEX ]]
  return $?
}

validate_name() {
  local REGEX='^[a-zA-Z][a-zA-Z0-9-]{0,31}$'
  [[ $1 =~ $REGEX ]]
  return $?
}

validate_availability_zone() {
  local REGEX='^[a-f]$'
  [[ $1 =~ $REGEX ]]
  return $?
}

validate_os() {
  case "$1" in
    amzn1|trusty|xenial|bionic)
      return 0;;
    *)
      return 1;;
  esac
}

validate_instance_type() {
  case "$1" in
    t1.micro)
      return 0;;
    t2.nano|t2.micro|t2.small|t2.medium|t2.large)
      return 0;;
    m1.small|m1.medium|m1.large|m1.xlarge)
      return 0;;
    m2.xlarge|m2.2xlarge|m2.4xlarge)
      return 0;;
    m3.medium|m3.large|m3.xlarge|m3.2xlarge)
      return 0;;
    m4.large|m4.xlarge|m4.2xlarge|m4.4xlarge|m4.10xlarger)
      return 0;;
    c1.medium|c1.xlarge)
      return 0;;
    c3.large|c3.xlarge|c3.2xlarge|c3.4xlarge|c3.8xlarge)
      return 0;;
    c4.large|c4.xlarge|c4.2xlarge|c4.4xlarge|c4.8xlarge)
      return 0;;
    g2.2xlarge|g2.8xlarge)
      return 0;;
    r3.large|r3.xlarge|r3.2xlarge|r3.4xlarge|r3.8xlarge)
      return 0;;
    i2.xlarge|i2.2xlarge|i2.4xlarge|i2.8xlarge)
      return 0;;
    d2.xlarge|d2.2xlarge|d2.4xlarge|d2.8xlarge)
      return 0;;
    hi1.4xlarge)
      return 0;;
    hs1.8xlarge)
      return 0;;
    cr1.8xlarge)
      return 0;;
    cc2.8xlarge)
      return 0;;
    cg1.4xlarge)
      return 0;;
    m5.large|m5.xlarge|m5.2xlarge|m5.4xlarge|m5.12xlarge|m5.24xlarge)
      return 0;;
    i3.large|i3.xlarge|i3.2xlarge|i3.4xlarge|i3.8xlarge|i3.16xlarge)
      return 0;;
    h1.2xlarge|h1.4xlarge|h1.8xlarge|h1.16xlarge)
      return 0;;
    *)
      return 1;;
  esac
}

check_credentials() {
  if [ ! -f ./config/credentials.json ]; then
    cat <<- EOF
	cfn-aio: error: missing credentials:

	   In order to use cfn-aio the CloudBD credentials.json file needs to be
	   in the following directory:

	      ${REPO_PATH}/config

	   The CloudBD credentials.json file can be downloaded after logging in or
	   signing up at:

	      https://manage.cloudbd.io
	EOF
    exit 1
  fi
}

# cloudformation_tail adapted from https://github.com/aws/aws-cli/issues/2887

cloudformation_tail() {
  local stack="$1"
  local deleting="$2"
  local lastEvent
  local lastEventId
  local stackStatus=$(aws cloudformation describe-stacks \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name $stack \
    --query 'Stacks[0].StackStatus' \
    --output text 2>/dev/null)

  until \
    [ $? -ne 0 ] \
    || [ "$stackStatus" = "CREATE_COMPLETE" ] \
    || [ "$stackStatus" = "CREATE_FAILED" ] \
    || [ "$stackStatus" = "DELETE_COMPLETE" ] \
    || [ "$stackStatus" = "DELETE_FAILED" ] \
    || [ "$stackStatus" = "ROLLBACK_COMPLETE" ] \
    || [ "$stackStatus" = "ROLLBACK_FAILED" ] \
    || [ "$stackStatus" = "UPDATE_COMPLETE" ] \
    || [ "$stackStatus" = "UPDATE_ROLLBACK_COMPLETE" ] \
    || [ "$stackStatus" = "UPDATE_ROLLBACK_FAILED" ]; do
    
    lastEvent=$(aws cloudformation describe-stack-events \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --stack $stack \
      --query 'StackEvents[].{ A:EventId, B:LogicalResourceId, C:ResourceType, D:ResourceStatus, E:Timestamp }' \
      --max-items 1 \
      --output text 2>/dev/null)
    if [ $? -eq 0 ]; then
      eventId=$(awk 'NR==1{print $1}' <<< "$lastEvent")
      if [ "$eventId" != "$lastEventId" ]; then
        lastEventId=$eventId
        logicalResourceId=$(awk 'NR==1{print $2}' <<< "$lastEvent")
        resourceType=$(awk 'NR==1{print $3}' <<< "$lastEvent")
        resourceStatus=$(awk 'NR==1{print $4}' <<< "$lastEvent")
        timeStamp=$(awk 'NR==1{print $5}' <<< "$lastEvent")
        printf "%-27s %-30s %-30s %s\n" "${timeStamp}" "${resourceStatus}" "${logicalResourceId}" "${resourceType}"
      fi
      sleep 3
    fi
    stackStatus=$(aws cloudformation describe-stacks \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --stack-name $stack \
      --query 'Stacks[0].StackStatus' \
      --output text 2>/dev/null)
  done

  if [ -n "${deleting}" ]; then
    if [ "$stackStatus" = "DELETE_COMPLETE" ]; then
      echo "Stack Status: DELETE_COMPLETE"
      return 0
    fi

    stackError=$(aws cloudformation describe-stacks \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --stack-name $stack \
      --query 'Stacks[0].StackStatus' \
      --output text 2>&1)
    # expecting the command to fail if the complete stack was deleted
    if [ $? -ne 0 ] && grep -q "does not exist" <<< "$stackError"; then
      echo "Stack Status: DELETE_COMPLETE"
      return 0
    else
      echo "Stack Staus: DELETE_FAILED ($stackStatus)"
      return 1
    fi
  fi

  echo "Stack Status: $stackStatus"
  if [ "$stackStatus" = "CREATE_COMPLETE" ] \
    || [ "$stackStatus" = "UPDATE_COMPLETE" ]; then
    return 0
  else
    return 1
  fi
}

get_stack_outputs() {
  Outputs=$(aws cloudformation describe-stacks \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name $1 \
    --query 'Stacks[0].Outputs[*].{Key:OutputKey, Value:OutputValue}' \
    --output text)
  if [ $? -ne 0 ]; then
    echo "Failed to query stack outputs"
    exit 1
  fi
}

usage_exit() {
  cat <<- EOF
	usage: cfn-aio <command> [options]
	To see help text, you can run:

	   cfn-aio help
	   cfn-aio <command> help
	$1
	EOF
  exit 1
}

do_help() {
  cat <<- EOF
	Usage:
	   cfn-aio <command> [options]

	Commands:

	   help			Show this help message
	   configure		Configure default values
	   create-region	Create regional resources
	   create-instance	Create an EC2 instance
	   delete-region	Delete regional resources
	   delete-instance	Delete an EC2 instance
	   update-region	Update regional resources
	   update-instance	Update an EC2 instance
	   ssh			SSH into an EC2 instance
	EOF
  exit 0
}

configure_help() {
  cat <<- EOF
	Usage:
	   cfn-aio configure [options]

	Description:
	   The configure command sets default options for cfn-aio. If this
	   command is run with no arguments, you will be prompted for
	   configuration values such as the default region and default AWS cli
	   profile to use. Values provided via arguments will be validated. If
	   the validation of the value fails, you will be prompted for a valid
	   value.

	   The default options are stored in config/.cfn-aio-config and will be
	   used for cfn-aio commands when not provided to a command as an
	   argument. If the config file does not exist, it will be created for
	   you. When prompted for a value, the current value will be shown in
	   [brackets]. To keep the existing value you may hit enter. Entered
	   values will be validated and if found to be incorrect, you will be
	   prompted again for a valid value.

	Configuration Variables:
	   The following environment variables are supported in the config file:

	   CBD_PROFILE - This is the AWS cli profile that will be used by
	   default when creating, deleting, or updating resources. The default
	   value when unconfigured is "default".

	   CBD_REGION - This is the AWS region that will be used by default when
	   creating, deleting, or updating resources. The default value when
	   unconfigured is "us-east-1".

	   CBD_AVAILABILITY_ZONE - This is the availability zone letter in the
	   CBD_REGION that will be used by default when creating EC2 instances
	   using the create-instance command. Supported values are a-f and must
	   also be valid for the AWS region when creating an EC2 instance. The
	   default value when unconfigured is "a".

	   CBD_SSH_CIDR_RANGE - This value specifies an IPv4 CIDR range that
	   limits the source IPv4 addresses that are allowed to SSH to the EC2
	   instances.  More specifically, it is the AWS::EC2::SecurityGroup->
	   SecurityGroupIngress->CidrIp value for the security group that
	   instances created by the create-instance command will use. The
	   default value when unconfigured is "0.0.0.0/0", which allows all
	   source IPv4 addresses to SSH to the instances.

	   CBD_EC2_INSTANCE_TYPE - This is the instance type that will be used
	   by default when creating EC2 instances using the create-instance
	   command.  The default value when unconfigured is "t2.micro".

	   CBD_EC2_OS - This is the operating system that will be used by
	   default when creating EC2 instances using the create-instance
	   command. Supported operating systems are: amzn1, trusty, xenial,
	   and bionic. The default value when unconfigured is "amzn1".

	Options:
	   --profile <AWS cli profile>
	   	Set the default AWS cli profile.

	   --region <AWS region>
	   	Set the default cfn-aio region.

	   --availability-zone <zone letter>
	   	Set the default availability zone letter in the region.

	   --ssh-cidr <cidr range>
	   	Set the default SSH Cidr address range.

	   --instance-type <type>
	   	Set the default EC2 instance type.

	   --os <os>
	   	Set the default operating system for EC2 instances.
	EOF
  exit 0
}

configure() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; configure_help;;
      --profile)
        shift; CBD_PROFILE_NEW="$1"; shift;;
      --region)
        shift; CBD_REGION_NEW="$1"; shift;;
      --availability-zone)
        shift; CBD_AVAILABILITY_ZONE_NEW="$1"; shift;;
      --ssh-cidr)
        shift; CBD_SSH_CIDR_RANGE_NEW="$1"; shift;;
      --instance-type)
        shift; CBD_EC2_INSTANCE_TYPE_NEW="$1"; shift;;
      --os)
        shift; CBD_EC2_OS_NEW="$1"; shift;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--profile <AWS cli profile>
	--region <AWS region>
	--availability-zone <zone letter>
	--ssh-cidr <cidr range>
	--instance-type <type>
	--os <os>
	EOF
        )";;
    esac
  done

  while true; do
    if [[ -z ${CBD_PROFILE_NEW} ]]; then
      read -p "Default AWS cli profile [${CBD_PROFILE}]: " CBD_PROFILE_NEW
      CBD_PROFILE_NEW="${CBD_PROFILE_NEW:-${CBD_PROFILE}}"
    fi
    if [[ "${CBD_PROFILE_NEW}" == "default" ]]; then
      if grep -q "\[${CBD_PROFILE_NEW}\]" ~/.aws/config; then
        CBD_PROFILE="${CBD_PROFILE_NEW}"
        break;
      else
        cat <<- EOF
	cfn-aio: error: The AWS cli default profile is not configured.

	Please run 'aws configure' and try again.
	EOF
        exit 1
      fi
    else
      if grep -q "\[profile ${CBD_PROFILE_NEW}\]" ~/.aws/config; then
        CBD_PROFILE="${CBD_PROFILE_NEW}"
        break;
      else
        cat <<- EOF
	Profile ${CBD_PROFILE_NEW} is not configured in the AWS cli. Please select
	an existing AWS cli profile.
	EOF
        CBD_PROFILE_NEW=""
      fi
    fi
  done

  while true; do
    if [[ -z ${CBD_REGION_NEW} ]]; then
      read -p "Default AWS region name [${CBD_REGION}]: " CBD_REGION_NEW
      CBD_REGION_NEW="${CBD_REGION_NEW:-${CBD_REGION}}"
    fi
    if validate_region "${CBD_REGION_NEW}"; then
      CBD_REGION="${CBD_REGION_NEW}"
      break
    else
      cat <<- EOF
	Invalid or unsupported region provided. Supported regions are:

	us-east-1	us-east-2	us-west-1	us-west-2
	eu-west-1	eu-west-2	eu-west-3	eu-central-1
	ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
	ap-south-1	ca-central-1	sa-east-1
	EOF
      CBD_REGION_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_AVAILABILITY_ZONE_NEW} ]]; then
      read -p "Default availability zone letter in ${CBD_REGION} for EC2 [${CBD_AVAILABILITY_ZONE}]: " CBD_AVAILABILITY_ZONE_NEW
      CBD_AVAILABILITY_ZONE_NEW="${CBD_AVAILABILITY_ZONE_NEW:-${CBD_AVAILABILITY_ZONE}}"
    fi

    if validate_availability_zone ${CBD_AVAILABILITY_ZONE_NEW}; then
      CBD_AVAILABILITY_ZONE="${CBD_AVAILABILITY_ZONE_NEW}"
      break;
    else
      echo "Invalid or unsupported availability zone. Enter a-f"
      CBD_AVAILABILITY_ZONE_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_SSH_CIDR_RANGE_NEW} ]]; then
      read -p "Default IpV4 address range in CIDR format that may SSH in to EC2 instances [${CBD_SSH_CIDR_RANGE}]: " CBD_SSH_CIDR_RANGE_NEW
      CBD_SSH_CIDR_RANGE_NEW="${CBD_SSH_CIDR_RANGE_NEW:-${CBD_SSH_CIDR_RANGE}}"
    fi

    if validate_cidr ${CBD_SSH_CIDR_RANGE_NEW}; then
      CBD_SSH_CIDR_RANGE="${CBD_SSH_CIDR_RANGE_NEW}"
      break;
    else
      echo "The provided value is not in CIDR format. Please enter a valid CIDR value."
      CBD_SSH_CIDR_RANGE_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_EC2_INSTANCE_TYPE_NEW} ]]; then
      read -p "Default instance type for EC2 [${CBD_EC2_INSTANCE_TYPE}]: " CBD_EC2_INSTANCE_TYPE_NEW
      CBD_EC2_INSTANCE_TYPE_NEW="${CBD_EC2_INSTANCE_TYPE_NEW:-${CBD_EC2_INSTANCE_TYPE}}"
    fi

    if validate_instance_type ${CBD_EC2_INSTANCE_TYPE_NEW}; then
      CBD_EC2_INSTANCE_TYPE="${CBD_EC2_INSTANCE_TYPE_NEW}"
      break;
    else
      cat <<- EOF
	Invalid or unsupported instance type provided. Supported instanct types are:

	t1.micro
	t2.nano		t2.micro	t2.small	t2.medium	t2.large
	m1.small	m1.medium	m1.large	m1.xlarge
	m2.xlarge	m2.2xlarge	m2.4xlarge
	m3.medium	m3.large	m3.xlarge	m3.2xlarge
	m4.large	m4.xlarge	m4.2xlarge	m4.4xlarge	m4.10xlarger
	m5.large	m5.xlarge	m5.2xlarge	m5.4xlarge	m5.12xlarge	m5.24xlarge
	c1.medium	c1.xlarge
	c3.large	c3.xlarge	c3.2xlarge	c3.4xlarge	c3.8xlarge
	c4.large	c4.xlarge	c4.2xlarge	c4.4xlarge	c4.8xlarge
	g2.2xlarge	g2.8xlarge
	r3.large	r3.xlarge	r3.2xlarge	r3.4xlarge	r3.8xlarge
	i2.xlarge	i2.2xlarge	i2.4xlarge	i2.8xlarge
	d2.xlarge	d2.2xlarge	d2.4xlarge	d2.8xlarge
	hi1.4xlarge
	hs1.8xlarge
	cr1.8xlarge
	cc2.8xlarge
	cg1.4xlarge
	i3.large	i3.xlarge	i3.2xlarge	i3.4xlarge	i3.8xlarge	i3.16xlarge
	h1.2xlarge	h1.4xlarge	h1.8xlarge	h1.16xlarge
	EOF
      CBD_EC2_INSTANCE_TYPE_NEW=""
    fi
  done

  while true; do
    if [[ -z ${CBD_EC2_OS_NEW} ]]; then
      read -p "Default operating system for EC2 [${CBD_EC2_OS}]: " CBD_EC2_OS_NEW
      CBD_EC2_OS_NEW="${CBD_EC2_OS_NEW:-${CBD_EC2_OS}}"
    fi

    if validate_os ${CBD_EC2_OS_NEW}; then
      CBD_EC2_OS="${CBD_EC2_OS_NEW}"
      break;
    else
      cat <<- EOF
	Invalid or unsupported operating system provided. Supported operating systems are:

	amzn1		Amazon Linux AMI
	trusty		Ubuntu 14.04 LTS / trusty
	xenial		Ubuntu 16.04 LTS / xenial
	bionic		Ubuntu 18.04 LTS / bionic
	EOF
      CBD_EC2_OS_NEW=""
    fi
  done

  cat <<- EOF > ${CBD_CONFIG_FILE}
	CBD_PROFILE="${CBD_PROFILE}"
	CBD_REGION="${CBD_REGION}"
	CBD_AVAILABILITY_ZONE="${CBD_AVAILABILITY_ZONE}"
	CBD_SSH_CIDR_RANGE="${CBD_SSH_CIDR_RANGE}"
	CBD_EC2_INSTANCE_TYPE="${CBD_EC2_INSTANCE_TYPE}"
	CBD_EC2_OS="${CBD_EC2_OS}"
	EOF

  if [ ! -f ./config/credentials.json ]; then
    cat <<- EOF

	   In order to use cfn-aio the CloudBD credentials.json file needs to be
	   in the following directory:

	      ${REPO_PATH}/config

	   The CloudBD credentials.json file can be downloaded after logging in or
	   signing up at:

	      https://manage.cloudbd.io
	EOF
  fi
}

create_region_help() {
  cat <<- EOF
	Usage:
	   cfn-aio create-region [options]

	Description:
	   The create-region command creates the regional AWS resources needed
	   for CloudBD EC2 instances. The resources are created using the AWS
	   cli using either the default configured profile or the profile
           provided via the --profile option. The AWS cli and a CloudFormation
	   template are used in this process. The AWS cli profile must have the
	   rights to create the resources outlined below.

	   After creating the AWS resources the create-region command creates
	   a CloudBD remote config file that is stored in the S3 bucket along
	   with a copy of the CloudBD credentials.json file. When EC2 instances
	   are created they download these files to complete their
	   configuration.

	   The resources created via this command may be removed by the
	   delete-region command, provided all CloudBD disks and the EC2
	   instances have been deleted first. See the delete-command for
	   details.

	Resources:
	   Unless otherwise specified, the following resources are created via a
	   CloudFormation template in templates/cloudbd-regional.yml and uses
	   the 'aws cloudformation create-stack' command to create the
	   resources:

	   SSH key-pair - This key-pair provides SSH access to the EC2 instances
	   created via the create-instance command. It is created using 'aws ec2
	   create-key-pair' command. The PEM encoded RSA private key for this
	   key is stored in the config sub-directoy.

	   S3 Bucket - This bucket is where CloudBD disks will store their data.
	   The bucket name is not specified in the template so a unique name
	   will be created by CloudFormation.

	   IAM User - This user is created with an inline policy that grants it
	   the rights needed for CloudBD disks to use the S3 bucket to store
	   data.  The user name is not specified in the template so a unique
	   name will be created by CloudFormation. After the stack is created,
	   an access key is created using 'aws iam create-access-key' and the
	   AccessKeyId and SecretAccessKey are saved in the CloudBD remote conf
	   file. CloudBD disks use the IAM User's access key to write to the S3
	   bucket.
	   
	   EC2 VPC - This VPC is created with an S3 endpoint and other
	   associated resources needed for CloudBD EC2 instances. EC2 instances
	   created via the create-instance command use this VPC. The VPC
	   includes Subnets for all availablity zones in the region, an
	   InternetGateway, an S3 VPCEndpoint, Routing Table and attachments.
	   See the regional template for details.

	   EC2 SecurityGroup - The SecurityGroup is created with SSH access from
	   the internet limited by the configured default SSH IpV4 Cidr value or
	   by the --ssh-cidr option if provided. EC2 instances created via the
	   create-instance command use this SecurityGroup. 

	Options:
	   When options are provided they override the default configured values
	   that were set with the configure command. When an option is not
	   provided the default configured value will be used.

	   --profile <AWS cli profile>
	   	The AWS cli profile to use.

	   --region <AWS region>
	   	The region to create CloudBD regional resources in.

	   --ssh-cidr <cidr range>
	   	The SSH Cidr address range that is allowed to SSH into EC2
	   	instances. The '0.0.0.0/0' value does not limit SSH source
	   	addresses.
	EOF
  exit 0
}

create_region() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; create_region_help;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS cli profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --ssh-cidr)
	if validate_cidr "$2"; then
          CBD_SSH_CIDR_RANGE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --ssh-cidr: Invalid ssh cidr range provied."
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--region <AWS region>
	--profile <AWS cli profile>
	--ssh-cidr <cidr range>
	EOF
        )";;
    esac
  done

  check_credentials

  local CBD_SSH_KEY_FILE="./config/cloudbd-${CBD_REGION}-key.pem"
  local CBD_SSH_KEY_NAME="cloudbd-${CBD_REGION}-key"

  if [ ! -f ${CBD_SSH_KEY_FILE} ]; then
    umask 077;
    if aws ec2 create-key-pair \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --key-name ${CBD_SSH_KEY_NAME} \
      --query KeyMaterial \
      --output text > ${CBD_SSH_KEY_FILE}; then
      echo "Created ec2 key-pair ${CBD_SSH_KEY_NAME} and key file ${CBD_SSH_KEY_FILE}"
    else
      echo "Failed to create ec2 key-pair"
      exit 1
    fi
  fi

  echo "Creating CloudFormation stack cloudbd-regional-${CBD_REGION}"

  aws cloudformation create-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-regional.yml \
    --stack-name cloudbd-regional-${CBD_REGION} \
    --capabilities CAPABILITY_IAM \
    --parameters \
        ParameterKey=SSHLocation,ParameterValue=${CBD_SSH_CIDR_RANGE} > /dev/null

  [ $? -eq 0 ] && cloudformation_tail cloudbd-regional-${CBD_REGION} || exit $?

  get_stack_outputs cloudbd-regional-${CBD_REGION}
  local BucketName=$(grep BucketName <<< "${Outputs}" | awk '{print $2}')
  local UserName=$(grep UserName <<< "${Outputs}" | awk '{print $2}')

  local AccessKeyOutput=$(aws iam create-access-key \
    --profile ${CBD_PROFILE} \
    --user-name "${UserName}" \
    --query 'AccessKey.{ Id:AccessKeyId, Key:SecretAccessKey }' \
    --output text)
  if [ $? -ne 0 ]; then
    echo "Failed to create access key for user ${UserName}"
    exit 1
  fi

  local AccessKeyId=$(awk '{print $1}' <<< "${AccessKeyOutput}")
  local SecretKey=$(awk '{print $2}' <<< "${AccessKeyOutput}")

  umask 077;
  cat <<- EOF > config/${CBD_REGION}.conf
	type = s3_v4
	endpoint_url = http://s3.${CBD_REGION}.amazonaws.com
	region = ${CBD_REGION}
	bucket = ${BucketName}
	access_key_id = ${AccessKeyId}
	secret_key = ${SecretKey}
	EOF

  echo "Created cloudbd configuration file ${CBD_REGION}.conf"

  aws s3 cp \
    --profile ${CBD_PROFILE} \
    config/${CBD_REGION}.conf s3://${BucketName}/config/${CBD_REGION}.conf

  aws s3 cp \
    --profile ${CBD_PROFILE} \
    config/credentials.json s3://${BucketName}/config/credentials.json

  echo "${CBD_REGION} created successfully."
}

delete_region_help() {
  cat <<- EOF
	Usage:
	   cfn-aio delete-region [options]

	Description:
	   The delete-region command deletes the AWS resources created by the
	   create-region command. The AWS cli and CloudFormtion are used in the
	   process of deleting the resources. The AWS cli profile must have the
	   rights to delete the resources outlined in the create-region command
	   help.

	   Prior to running this command, all CloudBD disks must be deleted so
	   that the S3 bucket is empty. In addition, any EC2 instances created
	   via the create-instance command must be deleted first.

	   The S3 bucket is checked to ensure that all CloudBD disks have been
	   deleted. If there are undeleted CloudBD disks, the delete-region
	   command will not proceed. CloudBD disks may be deleted using an EC2
	   instance that has been created in the same region using the
	   create-instance command. Do not delete the CloudBD disk data using
	   the AWS cli or the AWS web console. Using a CloudBD EC2 instance,
	   the 'cloudbd destroy' command will quickly delete all the data
	   previously stored on the disk using multiple parallel delete
	   operations.

	   When it has been confirmed no CloudBD disk data remains, the two
	   uploaded configuration files from the create-region command are
	   deleted from the S3 bucket and the CloudFormation stack is deleted
	   via 'aws cloudformation delete-stack' command. After the stack has
	   been deleted, the regional SSH key-pair will also be deleted.

	   Upon the succesful completion of the delete-region command, all
	   AWS resources created via the cfn-aio tool will have been removed
	   from the region.

	Options:
	   When options are provided they override the default configured values
	   that were set with the configure command. When an option is not
	   provided the default configured value will be used.

	   --profile <AWS cli profile>
	   	The AWS cli profile to use.

	   --region <AWS region>
	   	The region to delete CloudBD regional resources in.
	EOF
  exit 0
}

delete_region() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; delete_region_help;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS cli profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--profile <AWS cli profile>
	--region <AWS region>
	EOF
        )";;
    esac
  done

  local CBD_SSH_KEY_FILE="./config/cloudbd-${CBD_REGION}-key.pem"
  local CBD_SSH_KEY_NAME="cloudbd-${CBD_REGION}-key"

  get_stack_outputs cloudbd-regional-${CBD_REGION}
  local BucketName=$(grep BucketName <<< "${Outputs}" | awk '{print $2}')

  if aws s3 ls \
    --profile ${CBD_PROFILE} \
    s3://${BucketName}/cloudbd/ > /dev/null; then
    cat <<- EOF
	ERROR: Can not delete regional resources while CloudBD disks remain
	configured. Please delete your CloudBD disks before deleting your
	regional resources using a CloudBD EC2 instance.

	   Stop and unconfigure all CloudBD disks in this region
	      https://www.cloudbd.io/docs/gs-manage-disks.html#detach-a-disk

	   To list all existing disks:
	      cloudbd list ${CBD_REGION}

	   To delete a CloudBD disk that is not running:
	      cloudbd destroy ${CBD_REGION}:mydiskname

	When all disks have been stopped and deleted you can delete the
	CloudBD instance and regional resources.
	EOF
    exit 1
  fi

  aws s3 rm  \
    --profile ${CBD_PROFILE} \
    s3://${BucketName}/config/credentials.json > /dev/null

  aws s3 rm \
    --profile ${CBD_PROFILE} \
    s3://${BucketName}/config/${CBD_REGION}.conf > /dev/null

  echo "Deleting CloudFormation stack cloudbd-regional-${CBD_REGION}"

  aws cloudformation delete-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name cloudbd-regional-${CBD_REGION}

  [ $? -eq 0 ] && cloudformation_tail cloudbd-regional-${CBD_REGION} deleting || exit $?

  echo "Deleted stack cloudbd-regional-${CBD_REGION}"

  if [ -f ./config/${CBD_REGION}.conf ]; then
    rm ./config/${CBD_REGION}.conf && echo "Deleted ./config/${CBD_REGION}.conf"
  fi

  if [ -f "${CBD_SSH_KEY_FILE}" ]; then
    if aws ec2 delete-key-pair \
      --profile ${CBD_PROFILE} \
      --region ${CBD_REGION} \
      --key-name ${CBD_SSH_KEY_NAME} \
      && rm ${CBD_SSH_KEY_FILE}; then
      echo "Deleted key pair ${CBD_SSH_KEY_NAME}"
    else
      echo "Failed to delete key pair ${CBD_SSH_KEY_NAME}"
    fi
  fi
}

update_region_help() {
  cat <<- EOF
	Usage:
	   cfn-aio update-region [options]

	Description:
	   The update-region command updates previously created AWS resources
	   via the create-region command. This command can be used to modify
	   the SSH IpV4 Cidr range of an existing region or to update the region
	   should changes be made to the regional template.

	   The resources are updated by issuing an 'aws cloudformation
	   update-stack' command. The AWS cli profile must have the rights to
	   update the CloudFormation resources outlined in the create-region
	   command help.

	Options:
	   When options are provided they override the default configured values
	   that were set with the configure command. When an option is not
	   provided the default configured value will be used.

	   --profile <AWS cli profile>
	   	The AWS cli profile to use.

	   --region <AWS region>
	   	The region to update CloudBD regional resources in.

	   --ssh-cidr <cidr range>
	   	The SSH Cidr address range that is allowed to SSH into EC2
	   	instances. The '0.0.0.0/0' value does not limit SSH source
	   	addresses.
	EOF
  exit 0
}

update_region() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; update_region_help;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS cli profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --ssh-cidr)
	if validate_cidr "$2"; then
          CBD_SSH_CIDR_RANGE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --ssh-cidr: Invalid ssh cidr range provied."
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--profile <AWS cli profile>
	--region <AWS region>
	--ssh-cidr <cidr range>
	EOF
        )";;
    esac
  done

  echo "Updating CloudFormation stack cloudbd-regional-${CBD_REGION}"

  aws cloudformation update-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-regional.yml \
    --stack-name cloudbd-regional-${CBD_REGION} \
    --capabilities CAPABILITY_IAM \
    --parameters \
        ParameterKey=SSHLocation,ParameterValue=${CBD_SSH_CIDR_RANGE} > /dev/null

  [ $? -eq 0 ] && cloudformation_tail cloudbd-regional-${CBD_REGION} || exit $?
}

create_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio create-instance --name <instance name> [options]

	Description:
	   The create-instance command creates an EC2 instance and configures it
	   with CloudBD software.  The resources are created using the AWS
	   cli using either the default configured profile or the profile
           provided via the --profile option. The AWS cli and a CloudFormation
	   template are used in this process. The AWS cli profile must have the
	   rights to create an EC2 instance.

	   The instance is created using the regional SSH key-pair and
	   SecurityGroup which allows SSH access to the instance (limited by the
           SSH IpV4 Cidr address range). You may SSH into the instance in the
	   typical manor, or utilize the 'cfn-aio ssh' command for convenience.
	   The SSH private key for the region will be located here after the
	   create-region command has been run:

	   config/cloudbd-${CBD_REGION}-key.pem

	   The instance will be ready to create CloudBD disks and begin using
	   them. Please see the CloudBD documentation on how to create and
	   manage CloudBD disks:

	   https://www.cloudbd.io/docs/gs-manage-disks.html

	   Instances may be deleted by using the delete-instance command. It is
	   recommended that the CloudBD disks be detached and deleted prior to
	   deleting an instance. CloudBD disk data will remain in the regional
	   S3 bucket until they are deleted. Undeleted disks will prevent the
	   regional S3 bucket from being deleted.

	Options:
	   Required options:

	   --name <instance name>
	   	A unique name for the instance. Must start with a letter and
	   	contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS cli profile>
	   	The AWS cli profile to use.

	   --region <AWS region>
	   	The region to create CloudBD EC2 instance in.

	   --availability-zone <zone letter>
	   	The availability zone letter in the region. Must be a-f and be
	   	valid for the region.

	   --instance-type <type>
	   	The EC2 instance type. e.g. t2.micro, m5.large, etc.

	   --os <os>
	   	The operating system to use for the EC2 instance. Supported
	   	values are: amzn1, trusty, xenial, bionic.
	EOF
  exit 0
}

create_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; create_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS cli profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --os)
	if validate_os "$2"; then
          CBD_EC2_OS="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --os: Invalid or unsupported operating system provided.
		Supported operating systems are:

		amzn1		Amazon Linux AMI
		trusty		Ubuntu 14.04 LTS / trusty
		xenial		Ubuntu 16.04 LTS / xenial
		bionic		Ubuntu 18.04 LTS / bionic
		EOF
          exit 1
        fi
        ;;
      --availability-zone)
	if validate_availability_zone "$2"; then
          CBD_AVAILABILITY_ZONE="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --availability-zone: Invalid zone letter provided.

		Availablity zone must be a letter in the range a-f.
		EOF
          exit 1
        fi
        ;;
      --instance-type)
	if validate_instance_type "$2"; then
          CBD_EC2_INSTANCE_TYPE="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --instance-type: Invalid instance type provided.

		Supported instanct types are:

		t1.micro
		t2.nano		t2.micro	t2.small	t2.medium	t2.large
		m1.small	m1.medium	m1.large	m1.xlarge
		m2.xlarge	m2.2xlarge	m2.4xlarge
		m3.medium	m3.large	m3.xlarge	m3.2xlarge
		m4.large	m4.xlarge	m4.2xlarge	m4.4xlarge	m4.10xlarger
		m5.large	m5.xlarge	m5.2xlarge	m5.4xlarge	m5.12xlarge	m5.24xlarge
		c1.medium	c1.xlarge
		c3.large	c3.xlarge	c3.2xlarge	c3.4xlarge	c3.8xlarge
		c4.large	c4.xlarge	c4.2xlarge	c4.4xlarge	c4.8xlarge
		g2.2xlarge	g2.8xlarge
		r3.large	r3.xlarge	r3.2xlarge	r3.4xlarge	r3.8xlarge
		i2.xlarge	i2.2xlarge	i2.4xlarge	i2.8xlarge
		d2.xlarge	d2.2xlarge	d2.4xlarge	d2.8xlarge
		hi1.4xlarge
		hs1.8xlarge
		cr1.8xlarge
		cc2.8xlarge
		cg1.4xlarge
		i3.large	i3.xlarge	i3.2xlarge	i3.4xlarge	i3.8xlarge	i3.16xlarge
		h1.2xlarge	h1.4xlarge	h1.8xlarge	h1.16xlarge
		EOF
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS cli profile>
	--region <AWS region>
	--os <os>
	--availability-zone <zone letter>
	--instance-type <type>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  local EC2_STACK_NAME="cloudbd-${CBD_EC2_OS}-${CBD_REGION}-${CBD_EC2_NAME}"
  local CBD_SSH_KEY_NAME="cloudbd-${CBD_REGION}-key"

  get_stack_outputs cloudbd-regional-${CBD_REGION}
  local BucketName=$(grep BucketName <<< "${Outputs}" | awk '{print $2}')

  local CredentialsURL="$(aws s3 presign \
    --profile ${CBD_PROFILE} \
    --expires-in 600 \
    s3://${BucketName}/config/credentials.json)"

  local RemoteConfURL="$(aws s3 presign \
    --profile ${CBD_PROFILE} \
    --expires-in 600 \
    s3://${BucketName}/config/${CBD_REGION}.conf)"

  echo "Creating CloudFormation stack ${EC2_STACK_NAME}"

  aws cloudformation create-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-${CBD_EC2_OS}.yml \
    --stack-name ${EC2_STACK_NAME} \
    --parameters \
        ParameterKey=InstanceName,ParameterValue=${CBD_EC2_NAME} \
        ParameterKey=KeyName,ParameterValue=${CBD_SSH_KEY_NAME} \
        ParameterKey=CredentialsURL,ParameterValue=${CredentialsURL} \
        ParameterKey=RemoteConfURL,ParameterValue=${RemoteConfURL} \
        ParameterKey=InstanceType,ParameterValue=${CBD_EC2_INSTANCE_TYPE} \
        ParameterKey=AvailabilityZone,ParameterValue=${CBD_AVAILABILITY_ZONE} > /dev/null

  [ $? -eq 0 ] && cloudformation_tail ${EC2_STACK_NAME} || exit $?
}

delete_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio delete-instance --name <instance name> [options]

	Description:
	   The delete-instance command deletes an instance previously created
	   by the create-instance command.  The resources are deleted using the
	   AWS cli using either the default configured profile or the profile
           provided via the --profile option. The AWS cli and CloudFormation
	   are used in this process. The AWS cli profile must have the rights
	   to delete an EC2 instance using CloudFormation.

	   It is recommended that the CloudBD disks be detached and deleted
	   prior to deleting an instance. CloudBD disk data will remain in the
	   regional S3 bucket until they are deleted. Undeleted disks will
	   prevent the regional S3 bucket from being deleted. Do not delete the
	   CloudBD disk data using the AWS cli or the AWS web console. The
	   steps for detaching and deleting CloudBD disks may be found here:

	   https://www.cloudbd.io/docs/gs-manage-disks.html

	Options:
	   Required options:

	   --name <instance name>
	   	The unique name for the instance. Must start with a letter and
	   	contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS cli profile>
	   	The AWS cli profile to use.

	   --region <AWS region>
	   	The region to delete the CloudBD EC2 instance.

	   --os <os>
	   	The operating system of the EC2 instance. Supported values
	   	are: amzn1, trusty, xenial, bionic.
	EOF
  exit 0
}

delete_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; delete_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS cli profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --os)
	if validate_os "$2"; then
          CBD_EC2_OS="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --os: Invalid or unsupported operating system provided.
		Supported operating systems are:

		amzn1		Amazon Linux AMI
		trusty		Ubuntu 14.04 LTS / trusty
		xenial		Ubuntu 16.04 LTS / xenial
		bionic		Ubuntu 18.04 LTS / bionic
		EOF
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS cli profile>
	--region <AWS region>
	--os <os>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  local EC2_STACK_NAME="cloudbd-${CBD_EC2_OS}-${CBD_REGION}-${CBD_EC2_NAME}"

  echo "Deleting CloudFormation stack ${EC2_STACK_NAME}"

  aws cloudformation delete-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --stack-name ${EC2_STACK_NAME}

  [ $? -eq 0 ] && cloudformation_tail ${EC2_STACK_NAME} deleting || exit $?
}

update_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio update-instance --name <instance name> [options]

	Description:
	   The update-instance command updates an instance previouly created
	   via the create-instance command. This command can be used to modify
	   the availablity zone or instance type  of an existing instance or to
	   update the instance should changes be made to the instance template.

	   The instance is updated by issuing an 'aws cloudformation
	   update-stack' command. The AWS cli profile must have the rights to
	   update the CloudFormation stack containing the EC2 instance.

	   The region, name and operating system must all match an existing
	   instance and may not be changed to new values by this command.

	Options:
	   Required options:

	   --name <instance name>
	   	The unique name for the instance. Must start with a letter and
	   	contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS cli profile>
	   	The AWS cli profile to use.

	   --region <AWS region>
	   	The region with the CloudBD EC2 instance.

	   --availability-zone <zone letter>
	   	The availability zone letter in the region. Must be a-f and be
	   	valid for the region.

	   --instance-type <type>
	   	The EC2 instance type. e.g. t2.micro, m5.large, etc.

	   --os <os>
	   	The operating system to use for the EC2 instance. Supported
	   	values are: amzn1, trusty, xenial, bionic.
	EOF
  exit 0
}

update_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; update_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS cli profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --os)
	if validate_os "$2"; then
          CBD_EC2_OS="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --os: Invalid or unsupported operating system provided.
		Supported operating systems are:

		amzn1		Amazon Linux AMI
		trusty		Ubuntu 14.04 LTS / trusty
		xenial		Ubuntu 16.04 LTS / xenial
		bionic		Ubuntu 18.04 LTS / bionic
		EOF
          exit 1
        fi
        ;;
      --availability-zone)
	if validate_availability_zone "$2"; then
          CBD_AVAILABILITY_ZONE="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --availability-zone: Invalid zone letter provided.

		Availablity zone must be a letter in the range a-f.
		EOF
          exit 1
        fi
        ;;
      --instance-type)
	if validate_instance_type "$2"; then
          CBD_EC2_INSTANCE_TYPE="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --instance-type: Invalid instance type provided.

		Supported instanct types are:

		t1.micro
		t2.nano		t2.micro	t2.small	t2.medium	t2.large
		m1.small	m1.medium	m1.large	m1.xlarge
		m2.xlarge	m2.2xlarge	m2.4xlarge
		m3.medium	m3.large	m3.xlarge	m3.2xlarge
		m4.large	m4.xlarge	m4.2xlarge	m4.4xlarge	m4.10xlarger
		m5.large	m5.xlarge	m5.2xlarge	m5.4xlarge	m5.12xlarge	m5.24xlarge
		c1.medium	c1.xlarge
		c3.large	c3.xlarge	c3.2xlarge	c3.4xlarge	c3.8xlarge
		c4.large	c4.xlarge	c4.2xlarge	c4.4xlarge	c4.8xlarge
		g2.2xlarge	g2.8xlarge
		r3.large	r3.xlarge	r3.2xlarge	r3.4xlarge	r3.8xlarge
		i2.xlarge	i2.2xlarge	i2.4xlarge	i2.8xlarge
		d2.xlarge	d2.2xlarge	d2.4xlarge	d2.8xlarge
		hi1.4xlarge
		hs1.8xlarge
		cr1.8xlarge
		cc2.8xlarge
		cg1.4xlarge
		i3.large	i3.xlarge	i3.2xlarge	i3.4xlarge	i3.8xlarge	i3.16xlarge
		h1.2xlarge	h1.4xlarge	h1.8xlarge	h1.16xlarge
		EOF
          exit 1
        fi
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS cli profile>
	--region <AWS region>
	--os <os>
	--availability-zone <zone letter>
	--instance-type <type>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  local EC2_STACK_NAME="cloudbd-${CBD_EC2_OS}-${CBD_REGION}-${CBD_EC2_NAME}"
  local CBD_SSH_KEY_NAME="cloudbd-${CBD_REGION}-key"

  echo "Updating CloudFormation stack ${EC2_STACK_NAME}"

  aws cloudformation update-stack \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --template-body file://templates/cloudbd-${CBD_EC2_OS}.yml \
    --stack-name ${EC2_STACK_NAME} \
    --parameters \
        ParameterKey=InstanceName,ParameterValue=${CBD_EC2_NAME} \
        ParameterKey=KeyName,ParameterValue=${CBD_SSH_KEY_NAME} \
        ParameterKey=InstanceType,ParameterValue=${CBD_EC2_INSTANCE_TYPE} \
        ParameterKey=AvailabilityZone,ParameterValue=${CBD_AVAILABILITY_ZONE} > /dev/null

  [ $? -eq 0 ] && cloudformation_tail ${EC2_STACK_NAME} || exit $?
}

ssh_instance_help() {
  cat <<- EOF
	Usage:
	   cfn-aio ssh --name <instance name> [options] [-- ssh options]

	Description:
	   The ssh command SSH's into an existing EC2 instance created with the
	   create-instance command. Using the required --name argument together
	   with the region, and operating system, the current public DNS address
	   is queryed using the AWS cli and an ssh command is executed with the
	   following values:

	   ssh -i config/cloudbd-<region>-key.pem \\
	      <username>@<public dns> <ssh options>

	   Where <region> is the region value for the instance, <username> is
	   either 'ec2-user' for amzn1 instances or 'ubuntu' for Ubuntu
	   instances, and <public dns> is the DNS address that was obtained by
	   using the AWS cli.

	   If the optional -- argment is provided, anything following -- will
	   be passed to ssh as additional arguments.

	Options:
	   Required options:

	   --name <instance name>
	   	The unique name for the instance. Must start with a letter and
	   	contain alpha-numeric characters and hyphens only. 32
	   	characters max.

	   When the following options are provided they override the default
	   configured values that were set with the configure command. When an
	   option is not provided the default configured value will be used:

	   --profile <AWS cli profile>
	   	The AWS cli profile to use.

	   --region <AWS region>
	   	The region with the CloudBD EC2 instance.

	   --os <os>
	   	The operating system for the EC2 instance. Supported values
	   	are: amzn1, trusty, xenial, bionic.

	   -- <ssh options>
	   	Argments to pass to SSH.
	EOF
  exit 0
}

ssh_instance() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      help)
        shift; ssh_instance_help;;
      --name)
	if validate_name "$2"; then
          CBD_EC2_NAME="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --name: Invalid name provided.

		Names must start with an alphabetic character and contain only
		alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
		EOF
          exit 1
        fi
        ;;
      --profile)
	if validate_profile "$2"; then
          CBD_PROFILE="$2"; shift 2;
        else
	  echo "cfn-aio: error: argument --profile: The AWS cli profile is not configured."
          exit 1
        fi
        ;;
      --region)
	if validate_region "$2"; then
          CBD_REGION="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --region: Invalid or unsupported region provided.
		Supported regions are:

		us-east-1	us-east-2	us-west-1	us-west-2
		eu-west-1	eu-west-2	eu-west-3	eu-central-1
		ap-northeast-1	ap-northeast-2	ap-southeast-1	ap-southeast-2
		ap-south-1	ca-central-1	sa-east-1
		EOF
          exit 1
        fi
        ;;
      --os)
	if validate_os "$2"; then
          CBD_EC2_OS="$2"; shift 2;
        else
          cat <<- EOF
		cfn-aio: error: argument --os: Invalid or unsupported operating system provided.
		Supported operating systems are:

		amzn1		Amazon Linux AMI
		trusty		Ubuntu 14.04 LTS / trusty
		xenial		Ubuntu 16.04 LTS / xenial
		bionic		Ubuntu 18.04 LTS / bionic
		EOF
          exit 1
        fi
        ;;
      --)
        shift
        EC2_SSH_ARGUMENTS="$@"
        break
        ;;
      *)
        usage_exit "$(cat <<- EOF
	cfn-aio: error: argument options: Invalid option, valid options are:

	--name <instance name>
	--profile <AWS cli profile>
	--region <AWS region>
	--os <os>
	-- <arguments to pass to ssh command>
	EOF
        )";;
    esac
  done

  if [[ ! -n ${CBD_EC2_NAME} ]]; then
    usage_exit "cfn-aio: error: argument --name: Missing required argument --name"
  fi

  local EC2_STACK_NAME="cloudbd-${CBD_EC2_OS}-${CBD_REGION}-${CBD_EC2_NAME}"

  get_stack_outputs ${EC2_STACK_NAME}
  local InstanceId=$(grep InstanceId <<< "${Outputs}" | awk '{print $2}')

  local EC2_PUBLIC_DNS=$(aws ec2 describe-instances \
    --profile ${CBD_PROFILE} \
    --region ${CBD_REGION} \
    --instance-ids ${InstanceId} \
    --query 'Reservations[].Instances[].PublicDnsName' \
    --output text)

  if [[ ${CBD_EC2_OS} == "amzn1" ]]; then
    CBD_EC2_USERNAME="ec2-user"
  else
    CBD_EC2_USERNAME="ubuntu"
  fi

  exec ssh -i config/cloudbd-${CBD_REGION}-key.pem ${CBD_EC2_USERNAME}@${EC2_PUBLIC_DNS} ${EC2_SSH_ARGUMENTS}
}

if [[ $# -eq 0 ]]; then
  usage_exit "cfn-aio: error: too few arguments"
fi

case "$1" in
  help)
    shift; do_help;;
  configure)
    shift; configure "$@";;
  create-region)
    shift; create_region "$@";;
  create-instance)
    shift; create_instance "$@";;
  delete-region)
    shift; delete_region "$@";;
  delete-instance)
    shift; delete_instance "$@";;
  update-region)
    shift; update_region "$@";;
  update-instance)
    shift; update_instance "$@";;
  ssh)
    shift; ssh_instance "$@";;
  *)
    usage_exit "$(cat <<- EOF
	cfn-aio: error: argument command: Invalid choice, valid choices are:

	configure
	create-region
	create-instance
	delete-region
	delete-instance
	update-region
	update-instance
	ssh
	EOF
    )";;
esac

exit 0
