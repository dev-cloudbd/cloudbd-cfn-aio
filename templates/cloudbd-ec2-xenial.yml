---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudBD Ubuntu 16.04/xenial Template:
  This template creates and configures an EC2 instance using the VPC,
  S3 Bucket, IAM user and SSH key-pair from the remote template.'
Parameters:
  InstanceName:
    Description: The Ubuntu 16.04/xenial unique name of the instance
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: "[a-zA-Z_0-9-]*"
    ConstraintDescription: must start with an alphabetic character and contain only alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
  RemoteName:
    Description: The remote name
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: "[a-zA-Z_0-9-]*"
    ConstraintDescription: must start with an alphabetic character and contain only alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CredentialsURL:
    Description: Presigned URL to credentials.json
    Type: String
    Default: ""
  RemoteConfURL:
    Description: Presigned URL to remotes.d conf file
    Type: String
    Default: ""
  InstanceType:
    Description: EC2 instance type
    Type: String
  AvailabilityZone:
    Description: The Availability Zone letter to create the EC2 instance
    Type: String
    MinLength: '1'
    MaxLength: '1'
    AllowedPattern: "[a-f]"
    ConstraintDescription: must be a single character in the range a-f
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0565af6e282977273
    us-east-2:
      HVM64: ami-0e7589a8422e3270f
    us-west-2:
      HVM64: ami-0f49c6ee8f381746f
    us-west-1:
      HVM64: ami-0ff7f191316dba328
    ca-central-1:
      HVM64: ami-03d12de7d0e87fbf3
    eu-west-1:
      HVM64: ami-08660f1c6fb6b01e7
    eu-west-2:
      HVM64: ami-0f49c6ee8f381746f
    eu-west-3:
      HVM64: ami-0a8e17334212f7052
    eu-central-1:
      HVM64: ami-05af84768964d3dc0
    ap-northeast-1:
      HVM64: ami-02794be3fb6de50e1
    ap-northeast-2:
      HVM64: ami-067c32f3d5b9ace91
    ap-southeast-1:
      HVM64: ami-070bdb8798e3aeba7
    ap-southeast-2:
      HVM64: ami-001dae151248753a2
    ap-south-1:
      HVM64: ami-0a574895390037a62
    sa-east-1:
      HVM64: ami-05eaf9b21ed6dee3c
Resources:
  CloudBDXenialInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - Fn::ImportValue: !Sub 'cloudbd-resources-${RemoteName}-SecurityGroup'
        - Fn::ImportValue: !Sub 'cloudbd-resources-${RemoteName}-DefaultSecurityGroup'
      SubnetId:
        Fn::ImportValue: !Sub 'cloudbd-resources-${RemoteName}-subnet-${AvailabilityZone}'
      KeyName: !Ref KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - !Ref AWS::Region
        - HVM64
      Tags:
        -
          Key: Name
          Value: !Sub 'cloudbd-ec2-${InstanceName}'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            export DEBIAN_FRONTEND=noninteractive

            # The regional <region>.ec2.archive.ubuntu.com sources frequently
            # are not responsive or very very slow causing instances to time-out
            # so let's not use them.
            sed -i 's/http:.*\.ec2\.archive\.ubuntu\.com\/ubuntu\//mirror:\/\/mirrors\.ubuntu\.com\/mirrors\.txt/' /etc/apt/sources.list

            # upgrade packages and kernel
            apt-get update
            apt-get -y dist-upgrade

            # install cfn bootstrap package
            apt-get -y install python-pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            # perform AWS::CloudFormation::Init tasks
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource CloudBDXenialInstance --configsets default --region ${AWS::Region}

            # reboot if needed and signal completion to cloudfront
            RET=$?
            if [ -e /var/run/reboot-required ]; then
              cat <<- EOF > /etc/cron.d/cfn-signal
            	SHELL=/bin/bash
            	PATH=/sbin:/bin:/usr/sbin:/usr/bin
            	MAILTO=root
            	HOME=/
            	@reboot root { /usr/local/bin/cfn-signal -e ${!RET} --stack ${AWS::StackName} --resource CloudBDXenialInstance --region ${AWS::Region}; rm /etc/cron.d/cfn-signal; } > /dev/null
            	EOF
              reboot
            else
              /usr/local/bin/cfn-signal -e ${!RET} --stack ${AWS::StackName} --resource CloudBDXenialInstance --region ${AWS::Region}
            fi
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - CfnHupInstall
            - RepoInstall
            - Install
        CfnHupInstall:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=15
                verbose=true
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.CloudBDXenialInstance.Metadata
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource CloudBDXenialInstance --configsets default --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=Cloud formation helper daemon

                [Service]
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                Type=simple

                [Install]
                WantedBy=multi-user.target
          commands:
            01-install-cfn-hup:
              command: !Sub |
                set -xe
                systemctl enable cfn-hup.service
                systemctl start cfn-hup.service
        RepoInstall:
          files:
            /etc/apt/sources.list.d/cloudbd.list:
              source: https://repo.cloudbd.io/xenial/cloudbd.list
              mode: "000644"
              owner: "root"
              group: "root"
            /usr/share/keyrings/cloudbd-keyring.gpg:
              source: https://repo.cloudbd.io/cloudbd-keyring.gpg
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            01-apt-update:
              command: !Sub |
                set -xe
                apt-get update
        Install:
          files:
            /etc/sysctl.d/55-cloudbd.conf:
              content: !Sub |
                # Start writing data to CloudBD as soon as possible to reduce buffer
                # cache latency.
                vm.dirty_background_bytes=2097152
                
                # Request/response protocols like rpc and REST send some data
                # and wait for a response so there will always be idle time.
                # Dont shrink congestion window while idle.
                net.ipv4.tcp_slow_start_after_idle=0
                
                # pfifo_fast works best on EC2 with request/response
                net.core.default_qdisc = pfifo_fast
                
                # helps with unix domain sockets from kernel to user land driver
                net.core.wmem_max = 1056768
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            01-packages:
              command: !Sub |
                set -xe
                apt-get install -y cbd-client
            02-remote-conf:
              command: !Sub
                - |
                  set -xe
                  ConfURL="${ConfURL}"
                  ConfFile="${ConfFile}"
                  if [ -n "${!ConfURL}" ] && [ ! -f ${!ConfFile} ]; then
                    umask 027;
                    curl -sSfo ${!ConfFile} ${!ConfURL}
                    chown root:cloudbd ${!ConfFile}
                  fi
                - ConfURL: !Ref RemoteConfURL
                  ConfFile: !Sub '/etc/cloudbd/remotes.d/${RemoteName}.conf'
            03-creds:
              command: !Sub
                - |
                  set -xe
                  ConfURL="${ConfURL}"
                  ConfFile="${ConfFile}"
                  if [ -n "${!ConfURL}" ] && [ ! -f ${!ConfFile} ]; then
                    umask 027;
                    curl -sSfo ${!ConfFile} ${!ConfURL}
                    chown root:cloudbd ${!ConfFile}
                  fi
                - ConfURL: !Ref CredentialsURL
                  ConfFile: /etc/cloudbd/credentials.json
            04-cloudbd-group:
              command: !Sub |
                set -xe
                usermod -a -G cloudbd ubuntu
            05-sysctls:
              command: !Sub |
                set -xe
                sysctl --system
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref CloudBDXenialInstance
  OperatingSystem:
    Description: Operating system name
    Value: 'xenial'
  RemoteName:
    Description: Remote name this instance was created in
    Value: !Ref RemoteName
