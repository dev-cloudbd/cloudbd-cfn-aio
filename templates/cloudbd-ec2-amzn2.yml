---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudBD Amzn2 Template:
  This template creates and configures an EC2 instance using the VPC,
  S3 Bucket, IAM user and SSH key-pair from the remote template.'
Parameters:
  InstanceName:
    Description: The unique name of the instance in the region
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: "[a-zA-Z][a-zA-Z_0-9-]*"
    ConstraintDescription: must start with an alphabetic character and contain only alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
  RemoteName:
    Description: The remote name
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: "[a-zA-Z][a-zA-Z_0-9-]*"
    ConstraintDescription: must start with an alphabetic character and contain only alphanumeric characters (case-sensitive) and hyphens. 32 chars max.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CredentialsURL:
    Description: Presigned URL to credentials.json
    Type: String
    Default: ""
  RemoteConfURL:
    Description: Presigned URL to remotes.d conf file
    Type: String
    Default: ""
  InstanceType:
    Description: CloudBD amzn2 EC2 instance type
    Type: String
  AvailabilityZone:
    Description: The Availability Zone letter to create the EC2 instance
    Type: String
    MinLength: '1'
    MaxLength: '1'
    AllowedPattern: "[a-f]"
    ConstraintDescription: must be a single character in the range a-f
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  CloudBDAmzn2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - Fn::ImportValue: !Sub 'cloudbd-resources-${RemoteName}-SecurityGroup'
        - Fn::ImportValue: !Sub 'cloudbd-resources-${RemoteName}-DefaultSecurityGroup'
      SubnetId:
        Fn::ImportValue: !Sub 'cloudbd-resources-${RemoteName}-subnet-${AvailabilityZone}'
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      Tags:
        -
          Key: Name
          Value: !Sub 'cloudbd-ec2-${InstanceName}'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x

            # upgrade packages and kernel
            yum update -y

            # install cfn bootstrap package
            yum install -y aws-cfn-bootstrap

            # perform AWS::CloudFormation::Init tasks
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CloudBDAmzn2Instance --configsets default --region ${AWS::Region}

            # reboot if needed and signal completion to cloudfront
            RET=$?
            if needs-restarting -r; then
              /opt/aws/bin/cfn-signal -e ${!RET} --stack ${AWS::StackName} --resource CloudBDAmzn2Instance --region ${AWS::Region}
            else
              cat <<- EOF > /etc/cron.d/cfn-signal
            	SHELL=/bin/bash
            	PATH=/sbin:/bin:/usr/sbin:/usr/bin
            	MAILTO=root
            	HOME=/
            	@reboot root { /opt/aws/bin/cfn-signal -e ${!RET} --stack ${AWS::StackName} --resource CloudBDAmzn2Instance --region ${AWS::Region}; rm /etc/cron.d/cfn-signal; } > /dev/null
            	EOF
              reboot
            fi
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - CfnHupInstall
            - RepoInstall
            - Install
        CfnHupInstall:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=15
                verbose=true
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.CloudBDAmzn2Instance.Metadata
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CloudBDAmzn2Instance --configsets default --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        RepoInstall:
          files:
            /etc/yum.repos.d/cloudbd.repo:
              source: https://repo.cloudbd.io/amzn2/cloudbd.repo
              mode: "000644"
              owner: "root"
              group: "root"
        Install:
          files:
            /etc/sysctl.d/20-cloudbd.conf:
              content: !Sub |
                vm.dirty_background_bytes=2097152
              mode: "000644"
              owner: "root"
              group: "root"
          packages:
            yum:
              cbd-client: []
          commands:
            01-remote-conf:
              command: !Sub
                - |
                  set -xe
                  ConfURL="${ConfURL}"
                  ConfFile="${ConfFile}"
                  if [ -n "${!ConfURL}" ] && [ ! -f ${!ConfFile} ]; then
                    umask 027;
                    curl -sSfo ${!ConfFile} ${!ConfURL}
                    chown root:cloudbd ${!ConfFile}
                  fi
                - ConfURL: !Ref RemoteConfURL
                  ConfFile: !Sub '/etc/cloudbd/remotes.d/${RemoteName}.conf'
            02-creds:
              command: !Sub
                - |
                  set -xe
                  ConfURL="${ConfURL}"
                  ConfFile="${ConfFile}"
                  if [ -n "${!ConfURL}" ] && [ ! -f ${!ConfFile} ]; then
                    umask 027;
                    curl -sSfo ${!ConfFile} ${!ConfURL}
                    chown root:cloudbd ${!ConfFile}
                  fi
                - ConfURL: !Ref CredentialsURL
                  ConfFile: /etc/cloudbd/credentials.json
            03-cloudbd-group:
              command: !Sub |
                set -xe
                usermod -a -G cloudbd ec2-user
            04-sysctls:
              command: !Sub |
                set -xe
                sysctl vm.dirty_background_bytes=2097152
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref CloudBDAmzn2Instance
  OperatingSystem:
    Description: Operating system name
    Value: 'amzn2'
  RemoteName:
    Description: Remote name this instance was created in
    Value: !Ref RemoteName
